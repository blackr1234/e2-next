1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
f:I[6213,[],"OutletBoundary"]
11:I[6213,[],"MetadataBoundary"]
13:I[6213,[],"ViewportBoundary"]
15:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","js-advanced-syntax"],"i":false,"f":[[["",{"children":["blog",{"children":["(2021-05)",{"children":["js-advanced-syntax",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2021-05)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2021-05)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["js-advanced-syntax",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2021-05)","children","js-advanced-syntax","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"1 JavaScript 本質"}],"\n",["$","p",null,{"children":["Client-side 既 JavaScript 係由瀏覽器執行，所以會有 ",["$","code",null,{"children":"document"}]," 同 ",["$","code",null,{"children":"window"}],"，包含瀏覽器既 metadata、視窗大小、user agent 等等。"]}],"\n",["$","p",null,{"children":["JavaScript 唔似其他程式語言咁有 class 概念，而 JavaScript 中既 ",["$","code",null,{"children":"class"}]," 只係 ",["$","code",null,{"children":"prototype"}]," 既 syntactical sugar（語法糖，即係只係一個方便啲既寫法，唔係咩新功能）。JavaScript 一直都係 prototype-based。",["$","code",null,{"children":"Object.prototype"}],"、",["$","code",null,{"children":"Array.prototype"}],"、",["$","code",null,{"children":"Number.prototype"}],"、",["$","code",null,{"children":"String.prototype"}]," 等 prototypes 都可以被修改，影響所有已經建造既 object、array、number、string 等等。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"Object.prototype.keys = function () {\r\n\treturn Object.keys(this);\r\n};\r\n\r\n({ k: \"v\" }).keys(); // [\"k\"]\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"2 Variables"}],"\n",["$","p",null,{"children":"JavaScript 唔係 strongly typed，呢一點同 Java 完全唔同。除非用 JavaScript 既 superset TypeScript，否則 JavaScript 本身容許 variable 改變 data type。"}],"\n",["$","p",null,{"children":"另外，JavaScript 裡面既 function 都係 variable，可以直接 reference，呢一點唔同需要用 reflection 既 Java。"}],"\n",["$","h2",null,{"children":["2.1 ",["$","code",null,{"children":"var"}]]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Globally scoped 或者 function-scoped"}],"\n",["$","li",null,{"children":["如果唔係喺 function 裡面 declare 時用，個 variable 就會去左 ",["$","code",null,{"children":"window"}]]}],"\n",["$","li",null,{"children":"可以重新 declare"}],"\n",["$","li",null,{"children":"數值可以改變"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var bar;\r\nvar bar = 5;\r\nvar bar = 10;\r\nvar bar;\r\nbar // 5\r\nwindow.bar // 5\r\n\r\nlet bar; // SyntaxError: Identifier 'bar' has already been declared\r\nconst bar; // SyntaxError: Identifier 'bar' has already been declared\r\n\r\nfunction foo() {\r\n    var test = 123;\r\n}\r\n\r\ntest // ReferenceError: test is not defined\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":["2.2 ",["$","code",null,{"children":"let"}]]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Block-scoped"}],"\n",["$","li",null,{"children":"不能重新 declare"}],"\n",["$","li",null,{"children":"數值可以改變"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let bar;\r\nlet bar = 5;\r\nbar = 10;\r\n\r\nlet bar; // SyntaxError: Identifier 'bar' has already been declared\r\nconst bar; // SyntaxError: Identifier 'bar' has already been declared\r\n\r\nfunction foo() {\r\n    let test;\r\n    let test; // bad: SyntaxError: Identifier 'test' has already been declared\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":["2.3 ",["$","code",null,{"children":"const"}]]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Block-scoped"}],"\n",["$","li",null,{"children":"Declare 時必須提供數值"}],"\n",["$","li",null,{"children":"不能重新 declare"}],"\n",["$","li",null,{"children":"數值不能改變"}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const bar; // SyntaxError: Missing initializer in const declaration\r\nconst bar = 5;\r\nbar = 10; // TypeError: Assignment to constant variable.\r\n\r\nvar bar; // SyntaxError: Identifier 'bar' has already been declared\r\nlet bar; // SyntaxError: Identifier 'bar' has already been declared\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"for...in"}],"、",["$","code",null,{"children":"for...of"}]," 可以用 ",["$","code",null,{"children":"const"}],"，但 ",["$","code",null,{"children":"for"}]," 就唔得。"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.4 Hoisting"}],"\n",["$","p",null,{"children":"JavaScript 同 Java 既一個不同之處，就係 JavaScript 既 variables 可以喺 reference 之後先至 declare，咁係因為 JavaScript engine 識得 hoist，類似將 declaration 搬到 reference 之前。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"console.log(bar); // undefined\r\nvar bar = 5;\n"}]}],"\n",["$","p",null,{"children":["以上例子係唔會導致 ",["$","code",null,{"children":"ReferenceError"}],"，因為佢喺被執行既時候會變成："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"var bar;\r\nconsole.log(bar); // undefined\r\nbar = 5;\n"}]}],"\n",["$","p",null,{"children":["注意：hoisting variable declaration 並唔適用於 ",["$","code",null,{"children":"let"}]," 同 ",["$","code",null,{"children":"const"}],"，",["$","code",null,{"children":"let"}]," 同 ",["$","code",null,{"children":"const"}]," 既 variables 喺 declare 之前會進入 temporal dead zone（TDZ），reference 既話會得到 ",["$","code",null,{"children":"ReferenceError: Cannot access '<variable>' before initialization"}],"。"]}],"\n",["$","p",null,{"children":"Function declaration 都可以 hoist。呢一點 Java 一樣，可以將 method 寫喺 class body 任何地方。對 Java 黎講好正常，因為 Java 係 compiled language；但對 JavaScript 而言，因為係 interpreted language，唔 hoist 既話，到用既時候就會唔知有果樣野既存在。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"foo();\r\n\r\nfunction foo() {}\n"}]}],"\n",["$","p",null,{"children":"但係咁就唔得："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"foo(); // TypeError: foo is not a function\r\n\r\nvar foo = function () {};\n"}]}],"\n",["$","p",null,{"children":"參考資料："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://www.digitalocean.com/community/tutorials/understanding-hoisting-in-javascript","children":"Understanding Hoisting in JavaScript"}]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"3 Boolean 相關"}],"\n",["$","p",null,{"children":["JavaScript 同 Java 喺比較數值上有唔同，JavaScript 有 ",["$","code",null,{"children":"=="}]," 同 ",["$","code",null,{"children":"==="}],"；而 Java 就再強大得多（或者複雜得多），有 ",["$","code",null,{"children":"=="}]," 同 ",["$","code",null,{"children":"Object"}]," class 既 instance method ",["$","code",null,{"children":"equals(obj)"}],"（同 ",["$","code",null,{"children":"hashCode()"}]," 一齊用）。"]}],"\n",["$","p",null,{"children":["JavaScript 除左 Java 既 ",["$","code",null,{"children":"null"}],"（type：object），仲有 ",["$","code",null,{"children":"undefined"}],"（type：undefined）。"]}],"\n",["$","p",null,{"children":["參考：",["$","a",null,{"href":"https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a","children":"JavaScript — Double Equals vs. Triple Equals"}]]}],"\n",["$","h2",null,{"children":"3.1 驗證 value 係 truthy 定 falsy"}],"\n",["$","p",null,{"children":["如果 value 唔係 boolean，而喺冇得用 ",["$","code",null,{"children":"&&"}],"（AND）、",["$","code",null,{"children":"||"}],"（OR）、",["$","code",null,{"children":"?"}],"（ternary／conditional operator）、",["$","code",null,{"children":"if (boolean) {}"}],"、",["$","code",null,{"children":"while (boolean) {}"}],"（只能 take boolean 做 argument）既情況下，需要得出一個 boolean value，咁我地可以用 ",["$","code",null,{"children":"!"}],"（not operator）得出 boolean（相反值），然後寫兩次（",["$","code",null,{"children":"!!"}],"）就可以得出正值。"]}],"\n",["$","p",null,{"children":["JavaScript 同 Java 唔同既地方係，JavaScript 任何 variable，無論係 Number、Object 都可以驗證 truthy 或者 falsy，用 not operator ",["$","code",null,{"children":"!"}]," 得出 boolean 結果（truthy 或 falsy）。"]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"Number："}]}],"\n",["$","p",null,{"children":"只有 0 先係 falsy，其他 numbers 都係 truthy。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"!!0; // false\r\nlet bar = -0;\r\nbar; // -0 你冇睇錯，JavaScript 有分正 0、負 0\r\n!!-0; // false 不過正 0、負 0 一樣都係 falsy\r\n\r\n!!-5; // true 負數都係 truthy，因為有野\r\n!!5; // true\n"}]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"String："}]}],"\n",["$","p",null,{"children":"只要長度大過 0 就係 truthy，否則 falsy。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"!!\"\"; // false\r\n!!\" \"; // true 你冇睇錯，blank string 都係 truthy\r\n!!\"0\"; // true\n"}]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"Array："}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"!![]; // true 注意，咁係 check 唔到一個 array 係咪冇 element\r\n!![].length; // false\r\n!![1].length; // true\n"}]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"Object："}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"!!{}; // true 注意，咁係 check 唔到一個 object 係咪冇 property\r\n!!Object.keys({}).length; // false\r\n!!Object.keys({ k: \"v\" }).length; // true\n"}]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"There are only six falsy values in JavaScript you should be aware of:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"false — boolean false"}],"\n",["$","li",null,{"children":"0 — number zero"}],"\n",["$","li",null,{"children":"\"\" — empty string"}],"\n",["$","li",null,{"children":"null"}],"\n",["$","li",null,{"children":"undefined"}],"\n",["$","li",null,{"children":"NaN — Not A Number"}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.2 比較兩個 values"}],"\n",["$","p",null,{"children":["用 ",["$","code",null,{"children":"=="}]," 比較 boolean、number、string 既話，左右兩邊即使唔係同一個 type，如果 type cast 完之後數值上相同，都可以得出 ",["$","code",null,{"children":"true"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"5 == \"5\"; // true 因為 JavaScript 將 \"5\" 轉換成 5\r\n0 == false; // true 因為 JavaScript 將 0 轉換成 false\n"}]}],"\n",["$","p",null,{"children":["用 ",["$","code",null,{"children":"==="}]," 比較 number、string 既話，左右兩邊必須要係同一個 type，而且數值上相同，先會得出 ",["$","code",null,{"children":"true"}],"。"]}],"\n",["$","p",null,{"children":["用 ",["$","code",null,{"children":"==="}]," 或者 ",["$","code",null,{"children":"=="}]," 比較 array、object、function 既話，必須要係同一個 reference，先會得出 ",["$","code",null,{"children":"true"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"[] == [] // false\r\n{} == {} // false\r\n(() => {}) == (() => {}) // false 左右兩邊係 arrow function\r\n\r\n[] === [] // false\r\n{} === {} // false\r\n(() => {}) === (() => {}) // false 左右兩邊係 arrow function\n"}]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Double equals"}]}],"\n",["$","p",null,{"children":"When using double equals in JavaScript we are testing for loose equality. Double equals also performs type coercion."}],"\n"]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["$","strong",null,{"children":"Triple Equals"}]}],"\n",["$","p",null,{"children":["When using triple equals ",["$","code",null,{"children":"==="}]," in JavaScript, we are testing for strict equality. This means both the type and the value we are comparing have to be the same."]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"4 Array 語法"}],"\n",["$","p",null,{"children":"喺 JavaScript 既世界，Array 都係 Object 既一種。"}],"\n",["$","h2",null,{"children":["4.1 Array 可以有特殊既 ",["$","code",null,{"children":"empty"}]," element"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"[ , ] // [empty]\r\n[ , , ] // [empty × 2]\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.2 Array spread operator"}],"\n",["$","p",null,{"children":["當我地喺一個 array 上面用 spread operator，就可以去除最外層既 ",["$","code",null,{"children":"[]"}],"，令到 pass arguments 既時候只 pass 裡面既 elements（散開），而唔係個 array object。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"// ... 係 rest parameter，等於 Java 既 varargs\r\nfunction foo(bar, ...rest) {}\r\n\r\nfoo();\r\nfoo(1); // bar = 1\r\nfoo(1, 2); // bar = 1, rest = [2]\r\nfoo(1, 2, 3); // bar = 1, rest = [2, 3]\r\n\r\nconst arr = [1, 2, 3, 4];\r\nfoo(arr); // bar = [1, 2, 3, 4], rest = []\r\nfoo(...arr); // bar = 1, rest = [2, 3, 4] 呢個就係 spread\n"}]}],"\n",["$","p",null,{"children":"用 spread operator 黎重新建立一個新 array："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let arr = [1, 2, 3];\r\narr = [...arr, 4, ...arr];\r\narr; // [1, 2, 3, 4, 1, 2, 3]\n"}]}],"\n",["$","p",null,{"children":"Conditional spread："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"[...(true ? [1] : [])] // [1]\r\n[...(false ? [1] : [])] // []\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.3 Array destructuring assignment"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const [, r = 0, g = 0, b = 0] = [0.5, 248, 187, 223]; // ARGB\r\nr; // 248\r\ng; // 187\r\nb; // 223\n"}]}],"\n",["$","p",null,{"children":"解釋：將 array 既數值按順序按位置 assign 落左邊既 variables 同時提供 default value，亦可以用 empty 黎 skip 左唔需要既 elements。"}],"\n",["$","p",null,{"children":"互換數值："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let foo = 5;\r\nlet bar = 10;\r\n[foo, bar] = [bar, foo];\r\nfoo; // 10\r\nbar; // 5\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const obj = { bar: 5 };\r\nObject.entries(obj).forEach(([k, v]) => console.log(`${k}: ${v}`)); // bar: 5\n"}]}],"\n",["$","p",null,{"children":"可以用 rest parameter："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const [first, second, ...rest] = [1, 2, 3, 4];\r\nfirst; // 1\r\nsecond; // 2\r\nrest; // [3, 4]\n"}]}],"\n",["$","p",null,{"children":"就算乜 variable 名都冇，都唔會有問題："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const [, ,] = [1, 2, 3, 4];\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.4 生成數字 array"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"[...Array(10).keys()]; // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.5 去除重複 elements"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let arr = [1, 2, 3, 1, 2, 4];\r\narr = Array.from(new Set(arr));\r\narr; // [1, 2, 3, 4]\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"5 Object 語法"}],"\n",["$","h2",null,{"children":"5.1 創建 object"}],"\n",["$","p",null,{"children":"Shorthand property names："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const bar = 5;\r\nconst obj = { bar }; // 等於 { bar: bar }\r\nobj; // {bar: 5}\n"}]}],"\n",["$","p",null,{"children":["解釋：當我地 initialize object 既時候，如果喺 ",["$","code",null,{"children":"{}"}]," 裡面用 ",["$","code",null,{"children":"<variable>"}]," 既寫法而唔係 ",["$","code",null,{"children":"<key>: <value>"}]," 既寫法，variable 名就會成為 object property key，而 variable 既 value 就會成為 object property value。"]}],"\n",["$","p",null,{"children":"Computed property names："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const prefix = \"bar\";\r\nconst i = 3;\r\nconst obj = {\r\n\t[`${prefix}${i}`]: 5,\r\n};\r\nobj; // {bar3: 5}\n"}]}],"\n",["$","p",null,{"children":["解釋：",["$","code",null,{"children":"[]"}]," 裡面可以填 expression，表達 object property 名（string）。"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"5.2 Object spread operator"}],"\n",["$","p",null,{"children":["當我地喺一個 object 上面用 spread operator，就可以去除最外層既 ",["$","code",null,{"children":"{}"}],"，令到 pass arguments 既時候只 pass 裡面既 property key-value pairs（散開），而唔係個 object。"]}],"\n",["$","p",null,{"children":"用 spread operator 黎重新建立一個新 object："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let obj = { k: \"v\" };\r\nobj = { k: \"vv\", ...obj };\r\nobj; // {k: \"v\"}\r\nobj = { ...obj, k: \"vv\" };\r\nobj; // {k: \"vv\"}\n"}]}],"\n",["$","p",null,{"children":["注意：因為 object 既 properties 唔可以重複，所以 ",["$","code",null,{"children":"{}"}]," 裡面如果出現同一個 property 名（包括 spread 出黎既 properties），最後既數值會覆蓋之前既數值成為最終既數值。"]}],"\n",["$","p",null,{"children":"Conditional spread："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"{...(true && {k: 'v'})} // {k: \"v\"}\r\n{...(false && {k: 'v'})} // {}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"5.3 Object destructuring assignment"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const { k, kk = \"vv\" } = { k: \"v\" };\r\nk; // \"v\"\r\nkk; // \"vv\"\n"}]}],"\n",["$","p",null,{"children":"解釋：喺 object 拎個 property key-value 出黎 declare 成一個 variable，而 variable 名會同 object property 名一樣。如果 object 裡面冇我地需要既 property，可以提供 default value。"}],"\n",["$","p",null,{"children":"Destructure 既時候仲可以同時重新命名 variable："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const { k: kk } = { k: \"v\" };\r\nkk; // \"v\"\n"}]}],"\n",["$","p",null,{"children":"解釋：喺 object 拎個 property key-value 出黎 declare 成一個唔同名既 variable。"}],"\n",["$","p",null,{"children":"可以用 rest parameter："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const { k1, k2, ...rest } = { k1: 1, k2: 2, k3: 3, k4: 4 };\r\nk1; // 1\r\nk2; // 2\r\nrest; // {k3: 3, k4: 4}\n"}]}],"\n",["$","p",null,{"children":"就算乜 variable 名都冇，都唔會有問題："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const {} = { k: \"v\" };\n"}]}],"\n",["$","h3",null,{"children":"5.3.1 Nested object and array destructuring assignment"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const {\r\n\tname,\r\n\t// orders, // 如果需要 access orders array\r\n\torders: [{ id: id1, status: status1 }, { id: id2, status: status2 }],\r\n} = {\r\n\tname: \"Mick\",\r\n\torders: [\r\n\t\t{\r\n\t\t\tid: 101,\r\n\t\t\tstatus: \"SHIPPED\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 115,\r\n\t\t\tstatus: \"PAID\",\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: 128,\r\n\t\t\tstatus: \"CANCELLED\",\r\n\t\t},\r\n\t],\r\n};\r\n\r\nname; // \"Mick\"\r\nid1; // 101\r\nid2; // 115\r\nstatus1; // \"SHIPPED\"\r\nstatus2; // \"PAID\"\r\norders; // ReferenceError: orders is not defined\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"6 String 語法"}],"\n",["$","h2",null,{"children":"6.1 Template literal"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const bar = 5;\r\nconst foo = () => 10;\r\nconst str1 = `${bar}`;\r\nconst str2 = `${foo()}`;\r\nconst str3 = `${true ? bar : foo()}`;\r\nconst str4 = `${false ? bar : foo()}`;\r\n\r\nstr1; // \"5\"\r\nstr2; // \"10\"\r\nstr3; // \"5\"\r\nstr4; // \"10\"\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"7 Operators"}],"\n",["$","p",null,{"children":"參考資料："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table","children":"MDN - Operator precedence"}]}],"\n"]}],"\n",["$","h2",null,{"children":"7.1 Logical operators"}],"\n",["$","h3",null,{"children":"7.1.1 Logical AND operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a && b"}]," 會喺 ",["$","code",null,{"children":"a"}]," 係任何 truthy value 既情況下得出 ",["$","code",null,{"children":"b"}],"，否則得出 ",["$","code",null,{"children":"a"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"true && 10; // 10\r\n5 && 10; // 5\r\nnull && 10; // null\r\nundefined && 10; // undefined\r\n0 && 10; // 0\r\n\"\" && 10; // \"\"\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"7.1.2 Logical OR operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a || b"}]," 會喺 ",["$","code",null,{"children":"a"}]," 係任何 falsy value 既情況下得出 ",["$","code",null,{"children":"b"}],"，否則得出 ",["$","code",null,{"children":"a"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"true || 10; // true\r\n5 || 10; // 5\r\nnull || 10; // 10\r\nundefined || 10; // 10\r\n0 || 10; // 10\r\n\"\" || 10; // 10\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"7.1.3 Nullish coalescing operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a ?? b"}]," 只會喺 ",["$","code",null,{"children":"a"}]," 係 ",["$","code",null,{"children":"null"}]," 或者 ",["$","code",null,{"children":"undefined"}]," 既情況下得出 ",["$","code",null,{"children":"b"}],"，否則得出 ",["$","code",null,{"children":"a"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"true ?? 10; // true\r\n5 ?? 10; // 5\r\nnull ?? 10; // 10\r\nundefined ?? 10; // 10\r\n0 ?? 10; // 0\r\n\"\" ?? 10; // \"\"\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"7.2 Ternary/conditional operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a ? b : c"}]," 會喺 ",["$","code",null,{"children":"a"}]," 係任何 truthy value 既情況下得出 ",["$","code",null,{"children":"b"}],"，否則得出 ",["$","code",null,{"children":"c"}],"。"]}],"\n",["$","p",null,{"children":["而呢個 statement 係 short circuit evaluation，",["$","code",null,{"children":"b"}],"、",["$","code",null,{"children":"c"}]," 執唔執行視乎 ",["$","code",null,{"children":"a"}]," 既 value："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"a ? foo() : bar();\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"a"}]," 係 truthy 既情況下會執行 ",["$","code",null,{"children":"foo()"}],"，唔會執行 ",["$","code",null,{"children":"bar()"}]]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"a"}]," 係 falsy 既情況下會執行 ",["$","code",null,{"children":"bar()"}],"，唔會執行 ",["$","code",null,{"children":"foo()"}]]}],"\n"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let bar = 5;\r\n\r\n// ternary operator\r\nbar = bar > 3 ? 10 : \"false\";\r\n\r\n// 相等於\r\nif (bar > 3) {\r\n\tbar = 10;\r\n} else {\r\n\tbar = \"false\";\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"7.3 Assignment operators"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let bar = 10;\r\nbar++; // 相等於 bar = bar + 1;\r\nbar--; // 相等於 bar = bar - 1;\r\nbar += 5; // 相等於 bar = bar + 5;\r\nbar -= 5; // 相等於 bar = bar - 5;\r\nbar *= 5; // 相等於 bar = bar * 5;\r\nbar /= 5; // 相等於 bar = bar / 5;\r\nbar %= 5; // 相等於 bar = bar % 5;\r\n\r\nbar = 2;\r\nbar **= 3; // 相等於 bar = Math.pow(bar, 3);\n"}]}],"\n",["$","h3",null,{"children":"7.3.1 Logical AND assignment operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a &&= b;"}]," 會喺 ",["$","code",null,{"children":"a"}]," 係任何 truthy value 既情況下 assign ",["$","code",null,{"children":"b"}]," 去 ",["$","code",null,{"children":"a"}],"，否則咩都唔做。"]}],"\n",["$","p",null,{"children":["而呢個 statement 係 short circuit evaluation——只有當 ",["$","code",null,{"children":"a"}]," 係 truthy，",["$","code",null,{"children":"b"}]," 先會執行。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let bar = 10;\r\nbar &&= 5; // 相等於 bar && (bar = 5);\r\nbar; // 5\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"7.3.2 Logical OR assignment operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a ||= b;"}]," 會喺 ",["$","code",null,{"children":"a"}]," 係任何 falsy value 既情況下 assign ",["$","code",null,{"children":"b"}]," 去 ",["$","code",null,{"children":"a"}],"，否則咩都唔做。"]}],"\n",["$","p",null,{"children":["而呢個 statement 係 short circuit evaluation——只有當 ",["$","code",null,{"children":"a"}]," 係 falsy，",["$","code",null,{"children":"b"}]," 先會執行。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let bar = 0;\r\nbar ||= 10; // 相等於 bar || (bar = 10);\r\nbar; // 10\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"7.3.3 Logical nullish assignment operator"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"a ??= b;"}]," 只會喺 ",["$","code",null,{"children":"a"}]," 係 ",["$","code",null,{"children":"null"}]," 或者 ",["$","code",null,{"children":"undefined"}]," 既情況下 assign ",["$","code",null,{"children":"b"}]," 去 ",["$","code",null,{"children":"a"}],"，否則咩都唔做。"]}],"\n",["$","p",null,{"children":["而呢個 statement 係 short circuit evaluation——只有當 ",["$","code",null,{"children":"a"}]," 係 ",["$","code",null,{"children":"null"}]," 或者 ",["$","code",null,{"children":"undefined"}],"，",["$","code",null,{"children":"b"}]," 先會執行。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let bar = 0;\r\nbar ??= 10; // 相等於 bar ?? (bar = 10);\r\nbar; // 0\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"7.4 Optional chaining"}],"\n",["$","p",null,{"children":["當我地 call ",["$","code",null,{"children":"a.b.c.d"}]," 咁既 chaining 既時候，視乎情況，我地有時需要考慮到 ",["$","code",null,{"children":"a"}],"、",["$","code",null,{"children":"b"}],"、",["$","code",null,{"children":"c"}]," 有可能係 nullish（",["$","code",null,{"children":"undefined"}]," 或者 ",["$","code",null,{"children":"null"}],"）而加上唔少 check nullish value 既 code，否則可能會因為 nullish value 而導致 chaining 既時候出現 ",["$","code",null,{"children":"TypeError: Cannot read property 'x' of undefined/null"}],"。"]}],"\n",["$","p",null,{"children":["用返上面個例子，如果利用 optional chaining，就可以咁寫：",["$","code",null,{"children":"a?.b?.c?.d"}],"，而最少只需要 declare ",["$","code",null,{"children":"a"}]," 就已經可以避免到因為 nullish value 而導致既 ",["$","code",null,{"children":"TypeError"}],"。"]}],"\n",["$","p",null,{"children":["另一個例子 ",["$","code",null,{"children":"a.b().c.d"}]," 寫成 ",["$","code",null,{"children":"a?.b?.()?.c?.d"}]," 就可以 handle 到 ",["$","code",null,{"children":"a"}],"、",["$","code",null,{"children":"b"}],"、",["$","code",null,{"children":"b()"}],"、",["$","code",null,{"children":"c"}]," 係 nullish。不過有一點要留意，就係 optional chaining 都唔係無敵，因為 ",["$","code",null,{"children":"a?.b?."}]," 後面有 ",["$","code",null,{"children":"()"}],"，所以 ",["$","code",null,{"children":"b"}]," 就必須係 nullish 或者一個 valid 既 function object，否則就會出 ",["$","code",null,{"children":"TypeError: a?.b is not a function"}],"。"]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"style":{"textAlign":"left"},"children":"情境"}],["$","th",null,{"style":{"textAlign":"left"},"children":"例子"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"style":{"textAlign":"left"},"children":"Access 一個 object/array 既 property"}],["$","td",null,{"style":{"textAlign":"left"},"children":[["$","code",null,{"children":"o?.p"}],"、",["$","code",null,{"children":"o?.[\"p\"]"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"style":{"textAlign":"left"},"children":"Call 一個 function"}],["$","td",null,{"style":{"textAlign":"left"},"children":["$","code",null,{"children":"f?.()"}]}]]}]]}]]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const obj = {\r\n\tfoo: () => 123,\r\n\tbar: null,\r\n};\r\nconst obj2 = null;\r\n\r\nobj?.foo?.(); // 123\r\nobj?.bar?.(); // undefined\r\nobj?.bar?.(blah); // undefined\r\nobj?.[\"bar\"]; // undefined\r\n\r\nobj2?.foo; // undefined\r\nobj2?.blah(); // undefined\r\nobj2?.a?.b?.c?.d?.e; // undefined\r\n\r\nobj3; // ReferenceError\n"}]}],"\n",["$","p",null,{"children":["注意：Optional chaining 係用唔到喺 assignment 既左手邊，",["$","code",null,{"children":"a?.b = 123"}]," 係會出 ",["$","code",null,{"children":"SyntaxError: Invalid left-hand side in assignment"}],"。"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"8 Deep clone"}],"\n",["$","p",null,{"children":"Deep clone 同 shallow clone 既分別在於 clone 既深度。Shallow clone 指既係只會 clone 最表面果層，裡面如果有 nested objects，會用返相同既 object references，如果改左裡面既 nested object，就會影響到新舊兩個 objects；而 deep clone 就會 recursively 咁 clone 到去最入面果層，令到新既 object 同舊既 object 完全冇關係，無論點改其中一個 object，另一個 object 都唔會受到任何影響。"}],"\n",["$","p",null,{"children":"參考資料："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-deep-clone-an-object-in-javascript","children":"StackOverflow - What is the most efficient way to deep clone an object in JavaScript?"}]}],"\n"]}],"\n",["$","h2",null,{"children":["8.1 ",["$","code",null,{"children":"JSON"}]]}],"\n",["$","p",null,{"children":"最簡單亦適用於一般既 JSON data deep clone 場景既方法就係將 object serialize 成 string，再 deserialize 成全新既 object，裡面既 nested objects 都係全新。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let obj = { k: \"v\", kk: [1, 2] };\r\nobj = JSON.parse(JSON.stringify(obj));\r\nobj; // {k: \"v\", kk: [1, 2]}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"8.2 Lodash library"}],"\n",["$","p",null,{"children":["先透過 ",["$","code",null,{"children":"<script>"}]," load Lodash，或者以 ",["$","code",null,{"children":"npm install"}]," + ",["$","code",null,{"children":"import"}]," 語句 import Lodash。"]}],"\n",["$","p",null,{"children":["Lodash 既 utility object 係 ",["$","code",null,{"children":"_"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"let obj = { k: \"v\", kk: [1, 2] };\r\nobj = _.cloneDeep(obj);\r\nobj; // {k: \"v\", kk: [1, 2]}\n"}]}]],null,["$","$Lf",null,{"children":"$L10"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","p4_aZVge0zBlxjWlwIfPV",{"children":[["$","$L11",null,{"children":"$L12"}],["$","$L13",null,{"children":"$L14"}],null]}]]}],false]],"m":"$undefined","G":["$15","$undefined"],"s":false,"S":true}
14:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
10:null
