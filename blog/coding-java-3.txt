1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
10:I[6213,[],"OutletBoundary"]
12:I[6213,[],"MetadataBoundary"]
14:I[6213,[],"ViewportBoundary"]
16:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
f:T42c,byte b = 1;

short s = b; // implicit type conversion
byte b2 = s; // compilation error, Type mismatch: cannot convert from short to byte
byte b3 = (byte) s; // explicit type casting

int i = s; // implicit type conversion
short s2 = i; // compilation error, Type mismatch: cannot convert from int to short
short s3 = (short) i; // explicit type casting

char c = 1;
int i2 = c; // implicit type conversion
char c2 = i2; // compilation error, Type mismatch: cannot convert from int to char
char c3 = (char) i2; // explicit type casting

long l = i2; // implicit type conversion
int i3 = l; // compilation error, Type mismatch: cannot convert from long to int
int i4 = (int) l; // explicit type casting

float f = i2; // implicit type conversion
int i5 = f; // compilation error, Type mismatch: cannot convert from float to int
int i6 = (int) f; // explicit type casting

double d = l; // implicit type conversion
long l2 = d; // compilation error, Type mismatch: cannot convert from double to long
long l3 = (long) d; // explicit type casting
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","coding-java-3"],"i":false,"f":[[["",{"children":["blog",{"children":["(2020-09)",{"children":["coding-java-3",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2020-09)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2020-09)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["coding-java-3",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2020-09)","children","coding-java-3","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"3 Java 基礎知識"}],"\n",["$","h2",null,{"children":"3.1 關於 Java"}],"\n",["$","h3",null,{"children":"3.1.1 Compiled language"}],"\n",["$","p",null,{"children":"Java 係一隻 object-oriented programming (OOP) 程式語言，需要 JVM 黎運行。"}],"\n",["$","p",null,{"children":["Java 需要 compilation 過程，由 Java code（",["$","code",null,{"children":".java"}]," 檔） compile 成 bytecode（",["$","code",null,{"children":".class"}]," 檔），\r\n然後選擇性地用 JAR 或 WAR 黎再 zip 起多個 ",["$","code",null,{"children":".class"}]," 檔以及 project resources。"]}],"\n",["$","p",null,{"children":"當 Java code compile 左成 bytecode，係可以反向 decompile 返做 Java code，但唔會原汁原味，因為 compiler 有時會優化代碼，\r\n所以 decompilers（非官方既工具）好難估到本身係點寫。另外，如果我地係寫 Java API 畀其他人用（通常係高手先會寫），\r\n可以打包埋 sources 同 Javadoc，方便其他 developers 理解我地寫左既 code。"}],"\n",["$","p",null,{"children":"比較之下，JavaScript 就係一隻 scripting language，不需要 compile，如果冇 IDE，要到運行果一刻先知有冇寫錯。\r\nJS 需要一個 enable 左 JS 既瀏覽器，或者 JS runtime environment（如 NodeJS）。"}],"\n",["$","p",null,{"children":"IDE 會幫我地做呢個 compilation 過程，當我地改左 code 但錯 syntax，IDE 會「鬧」我地寫錯野。\r\n當我地 Ctrl+S 去 save 一個 Java type，IDE 都會 trigger compilation。"}],"\n",["$","p",null,{"children":["如果我地用 Maven 做 dependency management（方便我地用 3rd party libraries 同做版本管理）既話，當我地改左 ",["$","code",null,{"children":"pom.xml"}]," 然後 save，\r\nIDE 都會幫我地 build 過個 project，包括 compile code。"]}],"\n",["$","p",null,{"children":"當我地用部分 JDK 內建既 classes，或者所有 3rd party libraries，都需要 import 先可以用到，否則連 compile 都唔成功。"}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":["3.1.2 特殊既 ",["$","code",null,{"children":"main"}]," method"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"public static void main(String[] args) {}"}]," 係一個特殊既 method，係用黎做程底既入口。\r\n每個 class 都可以有一個 ",["$","code",null,{"children":"main"}]," method，所以每個 Java project 都可以有 N 個入口。\r\n但係一般都唔會寫多過一個。除非需要唔同既入口，否則只需要一個 ",["$","code",null,{"children":"main"}]," method。\r\n當我地 build 個 project 成一個 JAR（",["$","code",null,{"children":".jar"}]," 檔），我地需要提供 ",["$","code",null,{"children":"Main-Class"}]," 資訊。"]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://docs.oracle.com/javase/tutorial/deployment/jar/appman.html","children":"詳情"}]}],"\n",["$","p",null,{"children":["如果用 Maven，可以喺 Maven project 既 ",["$","code",null,{"children":"pom.xml"}]," 裡面設置。如果用左 Spring 既 build plugin，",["$","code",null,{"children":"Main-Class"}]," 既 config 係可以省略。"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/java-main-method.png","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.1.3 Compile time 及 runtime"}],"\n",["$","p",null,{"children":"Java 有 compile time 同 runtime。"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Compile time：你寫緊 code，compiler compile 你啲 code 既時候"}],"\n",["$","li",null,{"children":"Runtime：個程式 deploy 左，run 緊既時候"}],"\n"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/compile-time-vs-runtime.jpg","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.1.4 如何 deploy Java apps"}],"\n",["$","p",null,{"children":"一般而言，Java apps 可以分為以下幾類："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"類別"}],["$","th",null,{"children":"格式"}],["$","th",null,{"children":["$","code",null,{"children":"main"}]}],["$","th",null,{"children":"描述"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Java API"}],["$","td",null,{"children":["$","code",null,{"children":".jar"}]}],["$","td",null,{"children":"冇"}],["$","td",null,{"children":"畀其他相關既 projects 去 import，為左重用代碼或者高級 developers 提供 API 畀世人享用，如 Apache Commons Lang3"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"於 background 直接執行"}],["$","td",null,{"children":["$","code",null,{"children":".jar"}]}],["$","td",null,{"children":"有"}],["$","td",null,{"children":"可以 Command Prompt、Task Scheduler、cron 等 callers 去 call 個 Java app 去做啲 background tasks，只能通過 console 或 log files 見到個程式做左啲咩（前提係要 developers 有 code 到個 app 會 print log messages）"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"可直接執行既 GUI"}],["$","td",null,{"children":["$","code",null,{"children":".jar"}]}],["$","td",null,{"children":"有"}],["$","td",null,{"children":"會顯示 GUI（圖形使用者介面），Java GUI 技術有 Swing、SWT、JavaFX"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Web application"}],["$","td",null,{"children":[["$","code",null,{"children":".jar"}]," ",["$","code",null,{"children":".war"}]]}],["$","td",null,{"children":"冇"}],["$","td",null,{"children":"需要 deploy 去一個 web container，如 Apache Tomcat、 Eclipse Jetty、JBoss WildFly、IBM WebSphere Application Server。呢個做法較舊派"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"可直接執行既 web application"}],["$","td",null,{"children":["$","code",null,{"children":".jar"}]}],["$","td",null,{"children":"有"}],["$","td",null,{"children":"如 Spring Boot，因為已經內嵌左一個 Tomcat container，係一個可以直接用 Java Runtime Environment（JRE）運行既 web app。呢個做法係新主流"}]]}]]}]]}],"\n",["$","p",null,{"children":["我地唔會拎住成抽 bytecode ",["$","code",null,{"children":".class"}]," 檔去 deploy，但會將佢地連埋 manifest（一啲 metadata）打包成 ",["$","code",null,{"children":".jar"}]," 或 ",["$","code",null,{"children":".war"}]," 檔。其實本質上都係一個 ",["$","code",null,{"children":".zip"}]," 格式。"]}],"\n",["$","p",null,{"children":"如果用緊 Eclipse，我地可以喺 Eclipse 度行。直接撳個 launch 掣去 run as Java application 就得。"}],"\n",["$","p",null,{"children":"如果係可執行既 Java apps，唔想喺 Eclipse 度面行，可以 build/export 左做 JAR 先，然後打 command 黎執行："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"java -jar My-Application-1.0.jar\n"}]}],"\n",["$","p",null,{"children":"如果係 Spring Boot app 而且用左 Maven，可以打 command 等 Maven 幫我地 call JDK 去 compile 然後執行："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"mvn spring-boot:run\n"}]}],"\n",["$","p",null,{"children":["註：當我地個 ",["$","code",null,{"children":"pom.xml"}]," 用左 ",["$","code",null,{"children":"spring-boot-maven-plugin"}]," 呢個 Maven build plugin 既時候，個 Maven project 就會多左一個 ",["$","code",null,{"children":"run"}]," goal。"]}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/html/#goals-run","children":"詳情"}]}],"\n",["$","p",null,{"children":"JAR 檔其實都係 ZIP："}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/jar-file-content.png","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.2 Modifiers 修飾符"}],"\n",["$","p",null,{"children":"用於："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Type"}],"\n",["$","li",null,{"children":"Class/instance variable"}],"\n",["$","li",null,{"children":"Constructor"}],"\n",["$","li",null,{"children":"Method"}],"\n",["$","li",null,{"children":"Local variable"}],"\n",["$","li",null,{"children":"Constructor/method parameter"}],"\n"]}],"\n",["$","p",null,{"children":"註：如果用錯左 modifiers，compiler 會話你知。"}],"\n",["$","h3",null,{"children":"3.2.1 Access modifiers"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Modifier"}],["$","th",null,{"children":"常用程度"}],["$","th",null,{"children":"作用"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"public"}]}],["$","td",null,{"children":"高"}],["$","td",null,{"children":"所有 classes 都用得呢樣野"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"protected"}]}],["$","td",null,{"children":"中"}],["$","td",null,{"children":"只有 exactly 同一個 package 既所有 classes（但唔包括 subpackages）或者所有 subclasses 先用得呢樣野"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"乜都唔打，即係 default access modifier"}],["$","td",null,{"children":"低"}],["$","td",null,{"children":"只有 exactly 同一個 package 既所有 classes 先用得呢樣野（但唔包括 subpackages）"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"private"}]}],["$","td",null,{"children":"高"}],["$","td",null,{"children":"只有呢個 class 先用得呢樣野"}]]}]]}]]}],"\n",["$","p",null,{"children":"註："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["將所有野用曬 ",["$","code",null,{"children":"public"}]," 係一定 work，但係會令 access 太濫，影響 code maintenance，因為你唔知邊啲野係要 expose 畀其他 classes 用，所以最好係 limit access，最有限既 access 夠做就用果個。"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.2.2 Non-access modifiers"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Modifier"}],["$","th",null,{"children":"常用程度"}],["$","th",null,{"children":"作用"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"static"}]}],["$","td",null,{"children":"高"}],["$","td",null,{"children":"當呢樣野屬於 class（所有 object copies 都 share 一樣既）而唔係 instance（唔同既 object copies 會有唔同）"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"final"}]}],["$","td",null,{"children":"高"}],["$","td",null,{"children":["當一個 class 唔可以被 subclass；當一個 method 唔可以被 override；當一個 variable 只可以並且必須 assign 一次 value（assign ",["$","code",null,{"children":"null"}]," 都算）"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"abstract"}]}],["$","td",null,{"children":"中"}],["$","td",null,{"children":"當一個 class 既 methods 唔齊全；當一個 method 冇 method body"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"default"}]}],["$","td",null,{"children":"低"}],["$","td",null,{"children":"喺 interface 裡面可以 declare 一啲有 method body（implementation）既 methods"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"synchronized"}]}],["$","td",null,{"children":"低"}],["$","td",null,{"children":"多線程編程會用到"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"transient"}]}],["$","td",null,{"children":"低"}],["$","td",null,{"children":"JDK 自帶既 serialization 功能會用到，但不影響 3rd party library 如 Jackson Databind 既 serialization"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"volatile"}]}],["$","td",null,{"children":"低"}],["$","td",null,{"children":"多線程編程會用到"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"native"}]}],["$","td",null,{"children":"低"}],["$","td",null,{"children":"當一個 method 係以 Java Native Interface（JNI）呼叫底層 code"}]]}]]}]]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.2.3 Modifiers 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Foo { // type: public\r\n    private static final String MESSAGE = \"Hello World\"; // class variable: private static final\r\n\r\n    private final String name; // instance variable: private final\r\n\r\n    public Foo(final String name) { // constructor: public; constructor parameter: final\r\n        this.name = name;\r\n    }\r\n\r\n    public String sayHi() { // method: public\r\n        final String message = MESSAGE; // local variable: final\r\n        return toLowerCase(message);\r\n    }\r\n\r\n    public String sayHi(final String message) { // method: public; method parameter: final\r\n        return toLowerCase(message);\r\n    }\r\n\r\n    private String toLowerCase(String str) { // method: private\r\n        return str==null ? \"\" : str.toLowerCase();\r\n    }\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.3 Classes / types"}],"\n",["$","p",null,{"children":"Java 有 primitive types 同 object types（classes）。所有 primitive types 都有對應既 wrapper object types。"}],"\n",["$","h3",null,{"children":"3.3.1 Primitive data types 原始數據類型"}],"\n",["$","p",null,{"children":"Primitive types："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"boolean"}]," (",["$","code",null,{"children":"true"}]," / ",["$","code",null,{"children":"false"}],")"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"int"}],"（自然數）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"long"}],"（自然數，正負數範圍比 ",["$","code",null,{"children":"int"}]," 大）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"float"}],"（有小數點）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"double"}],"（有小數點，，正負數範圍比 ",["$","code",null,{"children":"float"}]," 大）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"byte"}],"（較少用）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"char"}],"（單字/符號，幾乎唔需要用到）"]}],"\n"]}],"\n",["$","p",null,{"children":"以上都唔係 object。"}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.3.2 Primitive data type conversion/casting"}],"\n",["$","p",null,{"children":"Primitive data types 之間可以轉換（conversion/casting），但要注意每隻 data type 既 value 上下限，同埋留意轉換過程可唔可以保留精確度。"}],"\n",["$","p",null,{"children":["喺需要處理金額之類需要百分百精確度既情境，一律建議使用 ",["$","code",null,{"children":"BigDecimal"}],"。另外仲有 ",["$","code",null,{"children":"BigInteger"}],"，都一樣係 ",["$","em",null,{"children":"arbitrary-precision"}],"。"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/primitive-data-type-conversion.png","alt":""}]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"箭嘴"}],["$","th",null,{"children":"解釋"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"實線"}],["$","td",null,{"children":"Automatic/implicit type conversion 自動轉換/隱式轉換（如要反方向轉換，必須進行 explicit type casting 顯式轉換）"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"虛線"}],["$","td",null,{"children":"轉換後有可能會失去精確度"}]]}]]}]]}],"\n",["$","h4",null,{"children":"3.3.2.1 Automatic type conversion 示範"}],"\n",["$","p",null,{"children":"以下為示範："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"$f"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.3.3 Primitive data types 既 wrapper classes"}],"\n",["$","p",null,{"children":["Primitive data types 唔容許 ",["$","code",null,{"children":"null"}],"，所以一定有一個明確既 value。但如果我地唔想咁，我地可以用 wrapper classes。"]}],"\n",["$","p",null,{"children":"Primitive types 對應既 wrapper classes（大部分都係將第一隻字轉大草）："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"Boolean"}]," (",["$","code",null,{"children":"true"}]," / ",["$","code",null,{"children":"false"}],")"]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"Integer"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"Long"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"Float"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"Double"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"Byte"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"Character"}]}],"\n"]}],"\n",["$","p",null,{"children":["以上 wrapper classes 通常用喺 DTO（data transfer objects），因為容許 ",["$","code",null,{"children":"null"}],"。"]}],"\n",["$","p",null,{"children":["文字既 data type 係 ",["$","code",null,{"children":"String"}],"，呢個就冇 primitive type，一定係 object。"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.3.4 Autoboxing 及 unboxing"}],"\n",["$","p",null,{"children":"為左方便使用 primitive types 同 primitives 既 wrapper classes，Java 原生支持 autoboxing 同 unboxing（autoboxing 既反方向）。"}],"\n",["$","p",null,{"children":"Autoboxing，即係由 primitive 自動 box/wrap 成 wrapper class，會喺以下情況下發生："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Integer num = 1;\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public static void main(String[] args) {\r\n\r\n    // autobox int 1 成 Integer 1\r\n\r\n    foo(1);\r\n}\r\n\r\nprivate static void foo(Integer num) {\r\n    // do sth\r\n}\n"}]}],"\n",["$","p",null,{"children":"Unboxing，即係由 wrapper class 自動 unbox/unwrap 成 primitive，會喺以下情況下發生："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"int num = new Integer(1);\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public static void main(String[] args) {\r\n\r\n    // unbox Integer 1 成 int 1\r\n\r\n    foo(new Integer(1));\r\n}\r\n\r\nprivate static void foo(int num) {\r\n    // do sth\r\n}\n"}]}],"\n",["$","p",null,{"children":"Autoboxing 同 unboxing 同時發生："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"// 先 unbox Integer 3 成 int 3\r\n// 再計 int 3 + int 2\r\n// 再將 int 5 autobox 成 Integer 5\r\nInteger num = new Integer(3) + 2;\r\n\r\n// 先 unbox Integer num 成 int 5 同 unbox Integer 4 成 int 4\r\n// 再計 int 5 + int 4\r\n// 再將 int 9 autobox 成 Integer 9\r\nnum += new Integer(4);\n"}]}],"\n",["$","p",null,{"children":["注意如果 unbox 既時候 object value 係 ",["$","code",null,{"children":"null"}],"，咁喺 runtime 就會出現 ",["$","code",null,{"children":"NullPointerException"}],"。"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":["3.3.5 Array / ",["$","code",null,{"children":"Collection"}]," / ",["$","code",null,{"children":"Map"}]]}],"\n",["$","p",null,{"children":["當我地想將好幾個同一個 type 既 data 放埋一齊成為一個組合，我地可以用 array、",["$","code",null,{"children":"Collection"}]," 或者 ",["$","code",null,{"children":"Map"}],"。不過 array 基本上好少機會會用到，因為功能唔及得上 ",["$","code",null,{"children":"Collection"}]," 咁多，例如 ",["$","code",null,{"children":"add"}],"、",["$","code",null,{"children":"remove"}]," 之類能夠改變長度既操作；或者 ",["$","code",null,{"children":"TreeSet"}]," 咁既會自己排序既 implementation；又可以喺 getter 度 return ",["$","code",null,{"children":"Collections.unmodifiableList(list)"}],"，防止修改 DTO object 既 property value，達到 immutability。喺 web application 裡面更加可以話係冇人會用 array。"]}],"\n",["$","p",null,{"children":"Array 既長度係固定既："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"String[] arr = new String[4];\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"int[] arr = new int[] { 3, 6 };\r\narr[0] = 7;\r\narr[2] = 3; // 因為只有 0 同 1 兩個 index，呢行會爆 ArrayIndexOutOfBoundsException\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Collection"}],"（",["$","code",null,{"children":"List"}],"、",["$","code",null,{"children":"Set"}],"）及 ",["$","code",null,{"children":"Map"}]," 既長度係 dynamic 既，任得你加（上限非常大）。"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Collection"}]," 既 ",["$","code",null,{"children":"List"}]," subinterface："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"List<String> list = new ArrayList<>();\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"List<String> list = new LinkedList<>();\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"List<String> list = new Vector<>();\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"list.add(\"Michael\");\r\nlist.add(\"Ben\");\r\n// 可以繼續 add 落去\n"}]}],"\n",["$","p",null,{"children":["註：",["$","code",null,{"children":"List"}]," 係會保留插入順序。"]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"Collection"}]," 既 ",["$","code",null,{"children":"Set"}]," subinterface（唔容許重複）："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Set<String> set = new HashSet<>(); // 不保留插入順序\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Set<String> set = new LinkedHashSet<>(); // 保留插入順序\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Set<String> set = new TreeSet<>(); // 自然順序\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"set.add(\"Michael\");\r\nset.add(\"Michael\"); // 因為已經存在，add 完唔會有分別\r\n// 可以繼續 add 落去\n"}]}],"\n",["$","p",null,{"children":["至於 ",["$","code",null,{"children":"Map"}],"，就可以放 key-value pairs（唔容許重複既 key，否則新既 entry 會 overwrite 舊既 entry）："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Map<String, Object> map = new HashMap<>(); // 不保留插入順序\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Map<String, Object> map = new LinkedHashMap<>(); // 保留插入順序\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"Map<String, Object> map = new TreeMap<>(); // 自然順序\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"map.put(\"Michael\", 25);\r\nmap.put(\"Michael\", 30); // overwrite 左 Michael=25\r\n// 可以繼續 put 落去\n"}]}],"\n",["$","p",null,{"children":["以上既 ",["$","code",null,{"children":"list"}],"、",["$","code",null,{"children":"set"}]," 同 ",["$","code",null,{"children":"map"}]," 都用左 polymorphism，即係 assign subclass 或 implementation class 去一個用 superclass 或 interface 既 type 去 declare 既 variable（",["$","code",null,{"children":"List<String> list"}],"）度。"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"List"}]," 係 interface，而 ",["$","code",null,{"children":"ArrayList"}],"、",["$","code",null,{"children":"LinkedList"}],"、",["$","code",null,{"children":"Vector"}]," 都係 ",["$","code",null,{"children":"implements"}]," 左 ",["$","code",null,{"children":"List"}]]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"Set"}]," 係 interface，而 ",["$","code",null,{"children":"HashSet"}],"、",["$","code",null,{"children":"LinkedHashSet"}]," 都係 ",["$","code",null,{"children":"implements"}]," 左 ",["$","code",null,{"children":"Set"}]]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"Map"}]," 係 interface，而 ",["$","code",null,{"children":"HashMap"}],"、",["$","code",null,{"children":"LinkedHashMap"}]," 都係 ",["$","code",null,{"children":"implements"}]," 左 ",["$","code",null,{"children":"Map"}]]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.3.6 自定義 types"}],"\n",["$","p",null,{"children":"當我地自定義 types，要知道有以下幾種叫法（或者形容關係）："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Java type 既款式"}],["$","th",null,{"children":"解釋"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Concrete class"}],["$","td",null,{"children":["只要所有 methods 都有 method body（implementation）就可被視為 concrete class，可以直接 ",["$","code",null,{"children":"new"}],"，如 ",["$","code",null,{"children":"new Foo()"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Implementation class"}],["$","td",null,{"children":["一個 ",["$","code",null,{"children":"implements"}]," 左某個 interface 既 class"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Abstract class"}],["$","td",null,{"children":["抽象層，當一個 class 有至少一個 method 缺少 method body（即係 abstract 左，原因可以係因為寫明左係 ",["$","code",null,{"children":"abstract"}],"，或者 ",["$","code",null,{"children":"implements"}]," 左個 interface 而繼承左佢既 abstract methods），呢個 class 就必須加上 ",["$","code",null,{"children":"abstract"}],"。Abstract class 可以成為 superclass 畀 subclass 去 ",["$","code",null,{"children":"extends"}],"。唔可以直接 ",["$","code",null,{"children":"new"}],"，除非你「就地」建立 anonymous class"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Subclass"}],["$","td",null,{"children":["一個 ",["$","code",null,{"children":"extends"}]," 左某個 superclass（可以係 concrete class，亦可以係 abstract class）"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Superclass"}],["$","td",null,{"children":["當一個 class（無論係 concrete class 抑或係 abstract class）被 ",["$","code",null,{"children":"extends"}],"，就可以被視為係 superclass"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Anonymous class"}],["$","td",null,{"children":["匿名 class，其實冇必要用，因為寫 concret class 會更好，亦有助於 unit testing。有兩個情況會用到 anonymous class，一係想用一個 abstract class 或 interface 但又唔想寫 concrete implementation class，一係想就地 override 一個 concrete class 既某啲 methods。寫 anonymous class 既時候要加 ",["$","code",null,{"children":"{}"}],"，即 ",["$","code",null,{"children":"new Foo() { /* 為 abstract methods 提供 method body */ }"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Interface"}],["$","td",null,{"children":["所有非 ",["$","code",null,{"children":"default"}]," 既 methods 都冇 method body（冇 implementation，亦係 abstract），亦冇 property。等於一份 contract，迫啲 ",["$","code",null,{"children":"implements"}]," 左呢個 interface 既 concrete class 一定要實現曬呢個 interface 有既 methods。唔可以直接 ",["$","code",null,{"children":"new"}],"，除非你「就地」建立 anonymous class"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Superinterface"}],["$","td",null,{"children":["就好似 superclass 咁，當一個 interface 被一個 interface ",["$","code",null,{"children":"extends"}]," 時，就可以被視為係 superinterface"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Subinterface"}],["$","td",null,{"children":["就好似 subclass 咁，係一個 ",["$","code",null,{"children":"extends"}]," 左一個或多個 interfaces 既 interface"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Enum"}],["$","td",null,{"children":["一舊野，主要用黎對比（",["$","code",null,{"children":"if"}],"-",["$","code",null,{"children":"else"}]," 或者 ",["$","code",null,{"children":"switch"}],"）。用於 ORM 時可以對應 MySQL 既 ",["$","code",null,{"children":"ENUM"}]," type"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Annotation"}],["$","td",null,{"children":"用黎標籤 type、method、property 或 parameter（不包括 local variable），要透過 reflection 先可以用到"}]]}]]}]]}],"\n",["$","h4",null,{"children":"3.3.6.1 Concrete class 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Foo {\r\n\r\n    // 只要所有 methods 都有 method body，就係 concrete class\r\n\r\n    public void play() {\r\n        // do sth\r\n    }\r\n}\n"}]}],"\n",["$","h4",null,{"children":"3.3.6.2 Abstract class 既例子"}],"\n",["$","p",null,{"children":"例子一："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public abstract class AbstractFoo {\r\n\r\n    // 因為有至少一個 abstract method，所以呢個 class 要係 abstract\r\n\r\n    protected abstract void play();\r\n}\n"}]}],"\n",["$","p",null,{"children":"例子二："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public abstract class AbstractFoo extends Bar {\r\n\r\n    // 繼承左 abstract 既 play()\r\n}\r\n\r\nabstract class Bar {\r\n\r\n    // 下面有一個 abstract method\r\n\r\n    protected abstract void play();\r\n}\n"}]}],"\n",["$","p",null,{"children":"例子三："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public abstract class AbstractFoo implements Bar {\r\n\r\n    // 繼承左 abstract 既 play()\r\n}\r\n\r\ninterface Bar {\r\n\r\n    // interface 既所有 methods 都係 abstract\r\n\r\n    void play();\r\n}\n"}]}],"\n",["$","h4",null,{"children":"3.3.6.3 Subclass 及 superclass 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Foo extends Bar {\r\n\r\n    // extends 左 Bar，所以係一個 subclass（methods 有齊 method body，所以亦係 concrete class）\r\n\r\n    @Override\r\n    protected void play() {\r\n        // do sth\r\n    }\r\n}\r\n\r\nabstract class Bar {\r\n\r\n    // 被 Foo extends，所以算係 Foo 既 superclass\r\n\r\n    protected abstract void play();\r\n}\n"}]}],"\n",["$","h4",null,{"children":"3.3.6.4 Implementation class 及 interface 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Foo implements Bar {\r\n\r\n    // implements 左 Bar，所以係一個 implementation class（methods 有齊 method body，所以亦係 concrete class）\r\n\r\n    @Override\r\n    public void doSth() {\r\n        // do sth\r\n    }\r\n}\r\n\r\ninterface Bar {\r\n\r\n    // interface 裡面既 methods 一定係 public 同 abstract\r\n\r\n    void doSth();\r\n}\n"}]}],"\n",["$","h4",null,{"children":"3.3.6.5 Anonymous class 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Example {\r\n    public static void main(String[] args) {\r\n\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // do sth\r\n            }\r\n        }).start();\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","p",null,{"children":["上面段 code 既 ",["$","code",null,{"children":"new Runnable() {}"}]," 就係 anonymous class。"]}],"\n",["$","p",null,{"children":["由於 ",["$","code",null,{"children":"Runnable"}]," 係一個 interface，我地唔可以直接 ",["$","code",null,{"children":"new"}]," 佢，除非以 anonymous class 既做法，即係加 ",["$","code",null,{"children":"{}"}],"，同埋為所有 abstract methods 提供 method body。\r\n當然我地可以寫一個 class 去 ",["$","code",null,{"children":"implements Runnable"}],"，然後 ",["$","code",null,{"children":"new"}]," 呢個自定義 class。"]}],"\n",["$","p",null,{"children":["參考：",["$","a",null,{"href":"https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html","children":"Runnable (JDK 8)"}]]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.3.7 以 lambda 取代 anonymous class"}],"\n",["$","p",null,{"children":"以下呢個例子既 anonymous class 可以被新式 lambda 寫法取代："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Example {\r\n    public static void main(String[] args) {\r\n\r\n        // new Runnable() {} 係 anonymous class\r\n\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                // do sth\r\n            }\r\n        }).start();\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":"以 Java 8 既新 lambda 功能黎簡化："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Example {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        new Thread(() -> { /* do sth */ }).start();\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"() -> {}"}]," 係 lambda 語法。上面兩段 code call 緊既都係 ",["$","code",null,{"children":"Thread(Runnable)"}]," 既 constructor，只係自從 JDK 8 開始，\r\n我地有一個方便簡潔啲既方法去寫，避免 anonymous class 要寫咁多行 code。"]}],"\n",["$","p",null,{"children":["因為 JDK 既 ",["$","code",null,{"children":"Runnable"}]," 只有一個叫 ",["$","code",null,{"children":"run"}]," 既 method，所以我地先可以用 lambda。\r\n亦因為咁，所以 ",["$","code",null,{"children":"Runnable"}]," 可以 annotate ",["$","code",null,{"children":"@FunctionalInterface"}],"。"]}],"\n",["$","p",null,{"children":["參考：",["$","a",null,{"href":"https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html","children":"Runnable (JDK 8)"}]]}],"\n",["$","p",null,{"children":"註：C# 同 JavaScript 都有 lambda syntax。"}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.3.8 Naming convention 命名原則/慣例"}],"\n",["$","p",null,{"children":"Java 既命名慣例係："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"UpperCamelCase"}],"：type 名"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"lowerCamelCase"}],"：property、local variable、method 名、parameter"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"UPPER_UNDERSCORE_CASE"}],"：constant 名（不變值）"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.4 如何設計 class"}],"\n",["$","p",null,{"children":"一般我地會有以下幾種 class 設計："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"設計"}],["$","th",null,{"children":"描述"}],["$","th",null,{"children":"例子"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Service class"}],["$","td",null,{"children":"擁有 business logic 既 class"}],["$","td",null,{"children":"自定義，冇例子"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Data Access Object (DAO) class"}],["$","td",null,{"children":"用黎 access DB，每個 method 可以被視為一句 SQL"}],["$","td",null,{"children":["任何 ",["$","code",null,{"children":"implements JpaRepository"}]," 既 class"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Plain old Java object（POJO）、Value Object（VO）、Data transfer object（DTO）class"}],["$","td",null,{"children":"用黎儲住 data，喺不同既 class 之間使用"}],["$","td",null,{"children":"自定義，以 properties、getters、setters 為主既 class，可以有啲自定義 methods"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Utility class"}],["$","td",null,{"children":"工具類，與 helper class 相似，stateless（唔會有 non-static properties），而且全部都係 static methods（有啲情況下會令到某啲 test 較難寫）"}],["$","td",null,{"children":["Apache Commons Lang3 既 ",["$","code",null,{"children":"StringUtils"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Helper class"}],["$","td",null,{"children":["工具類，與 utility class 相似，可以係 stateful（可以有 non-static properties），未必有 static methods，呢個 class 可以係需要 construct（e.g. ",["$","code",null,{"children":"new MyHelper()"}],"）或者用 singleton pattern（runtime 只有一個 object copy）（e.g. ",["$","code",null,{"children":"MyHelper.getInstance()"}],"）"]}],["$","td",null,{"children":["JDK 既 ",["$","code",null,{"children":"Calendar"}]]}]]}]]}]]}],"\n",["$","p",null,{"children":"註：如果我地 apply 唔同既 design patterns，亦可以有更多不同種類既 class。"}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.5 如何寫 method"}],"\n",["$","p",null,{"children":"一個 method 有以下部分："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"部分"}],["$","th",null,{"children":"描述"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Modifiers"}],["$","td",null,{"children":["Access modifier、",["$","code",null,{"children":"static"}],"、",["$","code",null,{"children":"abstract"}],"、",["$","code",null,{"children":"final"}]," 及 ",["$","code",null,{"children":"synchronized"}]]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Return type"}],["$","td",null,{"children":["冇野 return 就 ",["$","code",null,{"children":"void"}],"，有就畀個 type 佢"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Method 名"}],["$","td",null,{"children":["應以 ",["$","code",null,{"children":"lowerCamelCase"}]," 命名"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Parameters"}],["$","td",null,{"children":["冇就留空，有就加上去，最後一個 parameter 可以係 ",["$","code",null,{"children":"..."}]," varargs（等同 array）"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Method body"}],["$","td",null,{"children":["Implementation，如果 method 係 ",["$","code",null,{"children":"abstract"}],"，就唔需要 ",["$","code",null,{"children":"{}"}],"，直接 ",["$","code",null,{"children":";"}]," 就得"]}]]}]]}]]}],"\n",["$","p",null,{"children":"冇 return type 既例子："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public void foo(String message) {\r\n\r\n    // do sth\r\n\r\n    if (new Random().nextInt()==0) {\r\n        System.out.println(\"Lucky!\");\r\n        return; // 用黎控制 flow，提早返回\r\n    }\r\n\r\n    System.out.println(\"No luck!\");\r\n\r\n    return; // 如果寫喺最後一行，就可以省略，否則用黎控制 flow\r\n}\n"}]}],"\n",["$","p",null,{"children":"有 return type 既例子："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public String fullCapitalLetters(String message) {\r\n    return message==null ? null : message.toUpperCase();\r\n}\n"}]}],"\n",["$","h3",null,{"children":"3.5.1 Overload 一個 method"}],"\n",["$","p",null,{"children":"Method overloading 即係同一個 method 名，但 method parameters 唔同。"}],"\n",["$","p",null,{"children":["以下例子中，",["$","code",null,{"children":"sayHi"}]," method 有三個，當中運用左 method overloading。"]}],"\n",["$","p",null,{"children":"喺 Java 裡面 call methods，一定要中曬 delcare 左既 parameters 既數量、argument type 適合（subclass 或 implementation 都可以）先得。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public class Foo {\r\n\r\n    public static void main(String[] args) {\r\n        sayHi(); // Hi\r\n        sayHi(\"Michael\"); // Hi, Michael\r\n        sayHi(\"Michael\", true); // Hi, MCIHAEL\r\n    }\r\n\r\n    private static void sayHi() {\r\n        sayHi(null, false);\r\n    }\r\n\r\n    private static void sayHi(String message) {\r\n        sayHi(message, false);\r\n    }\r\n\r\n    private static void sayHi(String message, boolean isUpperCase) {\r\n        if (message==null) {\r\n            System.out.println(\"Hi\");\r\n        } else {\r\n            System.out.println(\"Hi, \" + (isUpperCase ? message.toUpperCase() : message));\r\n        }\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":["JavaScript 就冇需要咁寫，因為 JavaScript 可以用同一個 function 名，但落曬有可能畀既 parameters 去個 function 度，\r\n然後 call function 既時候畀少啲 arguments 都係可以既，甚至畀多過個 function 接受既都得。除此之外，JavaScript 既 non-arrow function 仲可以用一個叫 ",["$","code",null,{"children":"arguments"}]," 既 array 黎拎到 caller pass 入去既 arguments，換言之 JavaScript 既 function 係可以唔 declare parameters 但都拎到 arguments，自由度完勝 Java。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-javascript","children":"// 所有可能出現或需要用到既 parameters\r\nfunction sayHi(message, isUpperCase) {\r\n\tif (message) {\r\n\t\tconsole.log(\"Hi, \" + (isUpperCase ? message.toUpperCase() : message));\r\n\t} else {\r\n\t\tconsole.log(\"Hi, who are you?\");\r\n\t}\r\n}\r\n\r\n// 喺 arguments 裡面攞需要用到既 arguments\r\nfunction sayHello() {\r\n\tconst message = arguments && arguments.length >= 1 ? arguments[0] : undefined;\r\n\tconst isUpperCase = arguments && arguments.length >= 2 ? arguments[1] : undefined;\r\n\r\n\tsayHi(message, isUpperCase);\r\n}\r\n\r\n// ----- 任意 arguments -----\r\n\r\nsayHi(); // Hi, who are you?\r\nsayHi(\"Michael\"); // Hi, Michael\r\nsayHi(\"Michael\", true); // Hi, MICHAEL\r\n\r\n// ----- 畀多過個 method 接受既都得 -----\r\n\r\nsayHi(\"Michael\", true, \"extra\"); // Hi, MICHAEL\r\n\r\n// ----- 個 function 用左 arguments 而唔係 declare parameters -----\r\n\r\nsayHello(); // Hi, who are you?\r\nsayHello(\"Michael\"); // Hi, Michael\r\nsayHello(\"Michael\", true); // Hi, MICHAEL\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.5.2 Override 一個 method"}],"\n",["$","p",null,{"children":"喺一個 subclass 或者 implementation class 裡面，我地可以 override methods，即係將繼承左既 method 重新定義 implementation。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"abstract class AbstractFoo {\r\n\r\n    protected abstract void sayHi();\r\n}\r\n\r\ninterface Playable {\r\n\r\n    void play();\r\n\r\n    default void playTogether() {\r\n        // do sth\r\n    }\r\n}\r\n\r\npublic class Foo extends AbstractFoo implements Playable {\r\n\r\n    @Override\r\n    protected void sayHi() {\r\n        // do sth\r\n    }\r\n\r\n    @Override\r\n    public void play() {\r\n        // do sth\r\n    }\r\n\r\n    @Override\r\n    public void playTogether() {\r\n        // do sth\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":"Eclipse 中間個版面既左手邊既 line number 旁邊會顯示邊啲 methods 有被 overridden，如下圖既白色、綠色箭嘴："}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/eclipse-method-overriding.png","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.6 睇 libraries 既 Javadoc 以及實際 source code"}],"\n",["$","h3",null,{"children":"3.6.1 喺 Eclipse 裡面睇"}],"\n",["$","p",null,{"children":"無論你想睇既係 JDK 內建既 class 或 method 既定義抑或係 3rd party library 既定義，都可以喺 IDE 度做到。"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"將 cursor 放喺 class 或 method 上面，等一兩秒，佢會顯示一個帶有 Javadoc 既 popup，除非 API developer 冇寫，否則都會有文字描述。\r\n呢個時候可以撳 F2，或將 cursor 放喺呢個 popup 上面，等一秒，mouse 撳一撳個 popup 既文字，呢個時候就可以有多啲操作。"}],"\n",["$","li",null,{"children":"你亦可以按住 Ctrl 鍵，然後 mouse 撳落個 class 或 method 上，就可以直接踩入 API developer 寫既 code 裡面。"}],"\n"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/hover-cursor-javadoc.png","alt":""}]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/ctrl-hover-open-implementation.png","alt":""}]}],"\n",["$","h4",null,{"children":"3.6.1.1 安裝 Enhanced Class Decompiler plugin"}],"\n",["$","p",null,{"children":["$","a",null,{"href":"https://marketplace.eclipse.org/content/enhanced-class-decompiler","children":"Enhanced Class Decompiler - Eclipse Marketplace 地址"}]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Drag 個 Install 掣去 Eclipse 度安裝。"}],"\n",["$","li",null,{"children":"安裝最基本既 Core component 就夠。"}],"\n",["$","li",null,{"children":["去 menu bar > Window > Preferences > 左邊 filter text 打 ",["$","code",null,{"children":"file asso"}]," > 揀 File Associations > 右邊 File types 揀 ",["$","code",null,{"children":".class without source"}]," > 下面 set Class Decompiler Viewer 做 default。"]}],"\n"]}],"\n",["$","p",null,{"children":"參考資料："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://mkyong.com/java/java-decompiler-plugin-for-eclipse","children":"Java decompiler plugin for Eclipse IDE"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://www.gushiciku.cn/pl/gkXy/zh-tw","children":"Eclipse 中安裝反編譯工具 Fernflower（Enhanced Class Decompiler）"}]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"3.6.2 上官網睇 Javadoc"}],"\n",["$","p",null,{"children":["Google search：class 名 + ",["$","code",null,{"children":"8"}]," 即可，通常都會搵到，唔得就 + ",["$","code",null,{"children":"java 8"}],"。"]}],"\n",["$","p",null,{"children":["如 ",["$","code",null,{"children":"inputstream 8"}],"，就會搵到 ",["$","code",null,{"children":"InputStream (Java Platform SE 8 ) - Oracle Help Center"}],"。"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-3/oracle-online-javadoc.png","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.7 JDK 內建實用 classes"}],"\n",["$","p",null,{"children":"下面係一啲基本既 JDK 內建 classes。如果唔夠用，我地可以利用 Maven repository 上面既其他 libraries。"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Classes"}],["$","th",null,{"children":"描述"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"System"}]}],["$","td",null,{"children":"用黎簡單咁 print 下 log（開發用）、攞 environment variable 或者 system properties。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"File"}]}],["$","td",null,{"children":"同本地檔案、資料夾有關既操作都要用到。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":[["$","code",null,{"children":"Date"}],"（舊）、",["$","code",null,{"children":"Calendar"}],"（舊）、",["$","code",null,{"children":"LocalDate"}],"、",["$","code",null,{"children":"LocalDateTime"}],"、",["$","code",null,{"children":"Instant"}]]}],["$","td",null,{"children":"日期、時間相關。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"BigDecimal"}]}],["$","td",null,{"children":["當我地處理含有小數點金額既時候，要小心小數點因為數學運算而失去精確度。我地應該用 JDK 既 ",["$","code",null,{"children":"BigDecimal"}],"（major unit）或者 Joda-Money library 裡面含貨幣訊息既 ",["$","code",null,{"children":"Money"}],"（支持 major unit 及 minor unit）。"]}]]}],["$","tr",null,{"children":[["$","td",null,{"children":[["$","code",null,{"children":"Pattern"}]," 及 ",["$","code",null,{"children":"Matcher"}]]}],["$","td",null,{"children":"用黎做 regular expression（RegEx）運算。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":["$","code",null,{"children":"Thread"}]}],["$","td",null,{"children":["令程式可以 multithreading，畀多個線程同時運作，同時執行唔同既 ",["$","code",null,{"children":"Runnable"}],"。"]}]]}]]}]]}]],null,["$","$L10",null,{"children":"$L11"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","kTIIEbb3slv0NvAO2mC1B",{"children":[["$","$L12",null,{"children":"$L13"}],["$","$L14",null,{"children":"$L15"}],null]}]]}],false]],"m":"$undefined","G":["$16","$undefined"],"s":false,"S":true}
15:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
13:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
11:null
