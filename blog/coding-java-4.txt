1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
11:I[6213,[],"OutletBoundary"]
13:I[6213,[],"MetadataBoundary"]
15:I[6213,[],"ViewportBoundary"]
17:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
f:T8dc,server:
  port: 8080

# MySQL
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/learnjpa?useSSL=false
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
    tomcat: # Spring Boot 1
      test-while-idle: true
      validation-query: SELECT 1
      time-between-eviction-runs-millis: 360000
    hikari: # Spring Boot 2、3
      max-lifetime: 30000
  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: true
      fail-on-empty-beans: false
      write-dates-as-timestamps: true
    visibility.field: any
    visibility.getter: none
    visibility.setter: none
    visibility.is-getter: none

# SQL Server
spring:
  datasource:
    url: jdbc:sqlserver://localhost:1433;databaseName=learnjpa
    username: michael
    password:
    driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.SQLServer2012Dialect
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: true
      fail-on-empty-beans: false
      write-dates-as-timestamps: true
    visibility.field: any
    visibility.getter: none
    visibility.setter: none
    visibility.is-getter: none

# H2
spring:
  datasource:
    url: jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;TRACE_LEVEL_FILE=4
    username: sa
    password:
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
  jackson:
    default-property-inclusion: non_null
    serialization:
      indent-output: true
      fail-on-empty-beans: false
      write-dates-as-timestamps: true
    visibility.field: any
    visibility.getter: none
    visibility.setter: none
    visibility.is-getter: none
10:T74b,server.port=8080

# MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/learnjpa?useSSL=false
spring.datasource.username=root
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Spring Boot 1
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.validation-query=SELECT 1
spring.datasource.tomcat.time-between-eviction-runs-millis=360000
# Spring Boot 2、3
spring.datasource.hikari.max-lifetime=30000
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# SQL Server
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=learnjpa
spring.datasource.username=michael
spring.datasource.password=
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect

# H2
spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;TRACE_LEVEL_FILE=4
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Common
spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Jackson
spring.jackson.default-property-inclusion=non_null
spring.jackson.serialization.indent-output=true
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.serialization.write-dates-as-timestamps=true
spring.jackson.visibility.field=any
spring.jackson.visibility.getter=none
spring.jackson.visibility.setter=none
spring.jackson.visibility.is-getter=none
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","coding-java-4"],"i":false,"f":[[["",{"children":["blog",{"children":["(2020-09)",{"children":["coding-java-4",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2020-09)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2020-09)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["coding-java-4",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2020-09)","children","coding-java-4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"4 Spring 基礎知識"}],"\n",["$","h2",null,{"children":"4.1 簡介 - 認識 Spring 框架"}],"\n",["$","p",null,{"children":"最熱門、最強大既 Java framework，沒有「之一」。任何一份 Java developer report 都會見到 Spring framework 係 dominate 左個 market。"}],"\n",["$","p",null,{"children":"佢最重要既功能為："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"用 container 管理 application 既 beans（尤其是 singleton beans，即係有啲 class 喺成個 application 裡面只有一個 instance）"}],"\n",["$","li",null,{"children":"Dependency injection 依賴注入（透過使用 annotations 或 XML config）"}],"\n",["$","li",null,{"children":"Aspect-oriented programming (AOP)，即係以不同切面去介入，簡單講就係當我地想監控某特定 packages 既 Spring beans 既 public methods，\r\n當佢地一被 call 就落 log，log 低 parameter values 同 return values，方便日後 debug/troubleshoot 用，就可以用 AOP 實現。\r\n好處係咁樣做就唔需要任何 inheritance 或者 每個 class 每個 target method 都要 自己寫一堆 code 去做 logging。\r\nAOP 亦都被 Spring framework 自身好多功能所使用。"}],"\n",["$","li",null,{"children":["寫 backend web server 用（Maven 既 ",["$","code",null,{"children":"spring-boot-starter-web"}]," dependency）"]}],"\n",["$","li",null,{"children":"整合 container（i.e. Tomcat），不必再拎住個 JAR 或 WAR file，再額外下載 container program 黎 deploy 個 web app。"}],"\n"]}],"\n",["$","p",null,{"children":["用曬 annotation（如 ",["$","code",null,{"children":"@Component"}],"），好多野用曬 declarative programming 而唔係 imperative programming。"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.2 Spring 既項目"}],"\n",["$","p",null,{"children":"Spring 既項目眾多，包括："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Spring core framework（包括 Spring Web MVC）"}],"\n",["$","li",null,{"children":"Spring Boot"}],"\n",["$","li",null,{"children":"Spring Data"}],"\n",["$","li",null,{"children":"Spring Cloud"}],"\n",["$","li",null,{"children":"Spring Security"}],"\n",["$","li",null,{"children":"Spring Session"}],"\n",["$","li",null,{"children":"Spring Integration"}],"\n",["$","li",null,{"children":"Spring HATEOAS"}],"\n",["$","li",null,{"children":"Spring REST Docs"}],"\n",["$","li",null,{"children":"Spring Batch"}],"\n",["$","li",null,{"children":"Spring AMQP"}],"\n",["$","li",null,{"children":"Spring for Apache Kafka"}],"\n",["$","li",null,{"children":"Spring LDAP"}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.3 Spring Boot 與 microservice 微服務背景"}],"\n",["$","p",null,{"children":"作為一個 back-end application，我地想以最快最簡單既方法去設計 HTTP APIs 畀 client 去使用。"}],"\n",["$","p",null,{"children":"有別於舊派做法，which is 將 front-end 同 Spring Web MVC 既 back-end 結合埋一齊，同時喺同一個 code base 裡面，\r\n亦作為一個整體 couple 埋一齊去 deploy，我地而家用 Spring Boot 會想做到前後端分離（separating front-end and back-end），\r\nback-end 只負責提供 HTTP APIs 畀 front-end 去使用，而 front-end 將會係另一個獨立既 project，放喺唔同既 Git 或 SVN repository。"}],"\n",["$","p",null,{"children":"我地更可以做到將一個大既 back-end 以 business domain 去拆分，每一個 Spring Boot microservice 交由一個獨立既 development team 負責。\r\n而上游 microservice development team 可以用 API contract 去話畀下游 microservice development team 知道點樣用佢既 HTTP APIs（endpoints）。"}],"\n",["$","p",null,{"children":"至於 DB，最好係每個 microservice application 各自有一個獨立既 DB，table schema 都係只有該 domain 既野。"}],"\n",["$","p",null,{"children":"Clients 可以包括："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"另一個 domain 既 back-end microservice application"}],"\n",["$","li",null,{"children":"Front-end web application（如 Angular、React、Vue 等 web projects）"}],"\n"]}],"\n",["$","p",null,{"children":"HTTP APIs 一般都以 JSON 格式去交換資訊。以下為一個典型例子："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-json","children":"{\r\n\t\"departments\": [\r\n\t\t{\r\n\t\t\t\"name\": \"dev\",\r\n\t\t\t\"staff\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Ben\",\r\n\t\t\t\t\t\"salary\": 50000.0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"Ivan\",\r\n\t\t\t\t\t\"salary\": 45000.0\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.4 Spring Boot 開發簡介"}],"\n",["$","h3",null,{"children":"4.4.1 基本 project structure"}],"\n",["$","p",null,{"children":"一般至少會有以下 packages（或類似名）："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"<root package>"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","code",null,{"children":"controller"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"entity"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"repository"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"service"}]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"4.4.2 基本 class 種類"}],"\n",["$","p",null,{"children":["以下主要幾類 classes，佢地幾時 construct（",["$","code",null,{"children":"new"}],"）、被 dependency inject 到第啲 beans，都係交由 Spring 負責，所以又可以叫做 Spring beans。"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Controller layer","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["啲 classes 會被 annotate ",["$","code",null,{"children":"@Controller"}]," 或 ",["$","code",null,{"children":"@RestController"}]]}],"\n",["$","li",null,{"children":"用黎 expose HTTP APIs（endpoints）"}],"\n",["$","li",null,{"children":"增減 classes/methods 可以增減 HTTP APIs"}],"\n",["$","li",null,{"children":"一般為 singleton"}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Service layer","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["啲 classes 會被 annotate ",["$","code",null,{"children":"@Service"}],"，甚或 ",["$","code",null,{"children":"@Transactional"}]," 黎增添事務處理去確保 DB 既 ACID"]}],"\n",["$","li",null,{"children":"用黎放置 business logic"}],"\n",["$","li",null,{"children":"會 depends on 各個 repositories"}],"\n",["$","li",null,{"children":"增減 classes/methods 可以增減 business 情境"}],"\n",["$","li",null,{"children":"一般為 singleton"}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Repository layer","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["啲 classes 會被 annotate ",["$","code",null,{"children":"@Repository"}]]}],"\n",["$","li",null,{"children":"用黎同 DB 溝通"}],"\n",["$","li",null,{"children":"增減 classes 可以增減 tables 既 CRUD，一般黎講至少每個 entity 都會有對應既一個 repository"}],"\n",["$","li",null,{"children":["增減 methods 可以增減對應 table 既 CRUD SQLs（",["$","a",null,{"href":"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation","children":"參考"}],"）"]}],"\n",["$","li",null,{"children":"一般為 singleton"}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Entity","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["啲 classes 會被 annotate ",["$","code",null,{"children":"@Entity"}]," 同 ",["$","code",null,{"children":"@Table"}]]}],"\n",["$","li",null,{"children":"用黎做同 DB 之間既 Object-Relational Mapping (ORM)，class 就對應返 DB 既 table，property 就對應返該 table 既 columns"}],"\n",["$","li",null,{"children":"增減 classes 可以增減 table 既 ORM"}],"\n",["$","li",null,{"children":"增減 properties 可以增減 table 既 column mappings"}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"blog/2020-09/coding-java-4/controller-service-repository.png","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"4.4.3 基本 Spring Boot classes 既例子"}],"\n",["$","h4",null,{"children":"4.4.3.1 Controller 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@RestController\r\n@RequestMapping(\"sales\")\r\npublic void SalesController {\r\n\r\n    @Autowired\r\n    SalesService salesService;\r\n\r\n    /**\r\n     * <p>Endpoint：/sales/total</p>\r\n     * <p>將返回 JSON 格式：{ \"salesTotal\": 1000.00 }</p>\r\n     */\r\n    @GetMapping(\"total\")\r\n    public Map<String, Object> getTotal() {\r\n        final Map<String, Object> result = new HashMap<>();\r\n        result.put(\"salesTotal\", salesService.calculateTotal());\r\n        return result;\r\n    }\r\n}\n"}]}],"\n",["$","h4",null,{"children":"4.4.3.2 Service 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Service\r\npublic class SalesService {\r\n\r\n    @Autowired\r\n    SalesRepository salesRepository;\r\n\r\n    public BigDecimal calculateTotal() {\r\n        return salesRepository.findAll()\r\n                              .stream()\r\n                              .map(Sales::getAmount)\r\n                              .reduce(BigDecimal.ZERO, BigDecimal::add);\r\n    }\r\n}\n"}]}],"\n",["$","h4",null,{"children":"4.4.3.3 Repository 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Repository\r\npublic interface SalesRepository extends JpaRepository<Sales, Long> {\r\n\r\n    List<Sales> findAll();\r\n}\n"}]}],"\n",["$","h4",null,{"children":"4.4.3.4 Entity 既例子"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Entity\r\n@Table(name = \"sales\")\r\npublic class Sales {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = IDENTITY)\r\n    @Column(name = \"id\")\r\n    private Long id;\r\n\r\n    @Column(name = \"amount\")\r\n    private BigDecimal amount;\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public BigDecimal getAmount() {\r\n        return amount;\r\n    }\r\n\r\n    public void setAmount(BigDecimal amount) {\r\n        this.amount = amount;\r\n    }\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.5 Application 配置"}],"\n",["$","p",null,{"children":["Spring Boot 啟動既時候，會讀取特定既配置檔，如 ",["$","code",null,{"children":"application.properties"}],"、",["$","code",null,{"children":"application.yml"}]," 或包含環境名既 ",["$","code",null,{"children":"application-dev.yml"}],"。"]}],"\n",["$","p",null,{"children":"由於 Spring Boot 已經整合左 Tomcat container，所有 Tomcat 相關既配置都需要放喺上述檔案。\r\n呢個 application 行喺咩 port 位都一樣。"}],"\n",["$","p",null,{"children":"另外，如果需要連接 DB，相關既配置如 JDBC connection URL、username、password 以及用既 driver class 都需要喺上述檔案列出。"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"application.yml"}]," 例子："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"$f"}]}],"\n",["$","p",null,{"children":"註：實際情況下不應重覆配置，除非需要連接多過一個 database（需要特別處理）。"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"application.properties"}]," 例子："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-properties","children":"$10"}]}]],null,["$","$L11",null,{"children":"$L12"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","XDck38EFRYAggVay3WRX2",{"children":[["$","$L13",null,{"children":"$L14"}],["$","$L15",null,{"children":"$L16"}],null]}]]}],false]],"m":"$undefined","G":["$17","$undefined"],"s":false,"S":true}
16:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
14:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
12:null
