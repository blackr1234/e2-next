1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
f:I[6213,[],"OutletBoundary"]
11:I[6213,[],"MetadataBoundary"]
13:I[6213,[],"ViewportBoundary"]
15:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","java-spring-http-clients"],"i":false,"f":[[["",{"children":["blog",{"children":["(2023-11)",{"children":["java-spring-http-clients",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2023-11)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2023-11)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["java-spring-http-clients",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2023-11)","children","java-spring-http-clients","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"1 Java Spring 提供既 HTTP client APIs"}],"\n",["$","p",null,{"children":"微服務（又或者 monolith applications）可以透過 HTTP clients 以 HTTP REST calls 既形式連接其他服務，包括獲取、上載、更新、刪除資料。"}],"\n",["$","p",null,{"children":"以下係 Java Spring Boot 或者 Spring Cloud 項目可以用到既 HTTP client APIs："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["Java ",["$","code",null,{"children":"HttpClient"}]]}],"\n",["$","li",null,{"children":["Spring ",["$","code",null,{"children":"RestTemplate"}]]}],"\n",["$","li",null,{"children":["Spring Webflux ",["$","code",null,{"children":"WebClient"}]]}],"\n",["$","li",null,{"children":["Spring 6.1 ",["$","code",null,{"children":"RestClient"}],"（新）"]}],"\n",["$","li",null,{"children":"Spring Cloud OpenFeign"}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"2 動手寫"}],"\n",["$","h2",null,{"children":["2.1 Java ",["$","code",null,{"children":"HttpClient"}]]}],"\n",["$","p",null,{"children":["以下係 Java 本身提供既 ",["$","code",null,{"children":"HttpClient"}]," API。"]}],"\n",["$","p",null,{"children":"構建 client object："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final HttpClient client = HttpClient.newBuilder()\r\n\t.version(Version.HTTP_1_1)\r\n\t.connectTimeout(Duration.ofSeconds(10))\r\n\t.build();\n"}]}],"\n",["$","p",null,{"children":"發送 request："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String requestBody = \"{ \\\"value\\\": \\\"123\\\" }\";\r\n\r\nfinal HttpRequest request = HttpRequest.newBuilder()\r\n\t.version(Version.HTTP_1_1)\r\n\t.uri(new URI(\"http://localhost:8081/api/order/123?param1=value&param2=value\"))\r\n\t.POST(BodyPublishers.ofString(requestBody, StandardCharsets.UTF_8))\r\n\t.header(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString((\"username\" + \":\" + \"password\").getBytes()))\r\n\t.header(\"Content-Type\", \"application/json\")\r\n\t.header(\"header1\", \"header1-value\")\r\n\t.header(\"header2\", \"header2-value\")\r\n\t.build();\r\n\r\nfinal HttpResponse<String> response = client.send(request, BodyHandlers.ofString(StandardCharsets.UTF_8));\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"2xx"}],"、",["$","code",null,{"children":"3xx"}],"、",["$","code",null,{"children":"4xx"}]," 或 ",["$","code",null,{"children":"5xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String responseBody = response.body();\r\nfinal int responseStatusCode = response.statusCode();\r\nfinal boolean isResponse2xx = responseStatusCode >= 200 && responseStatusCode < 300;\r\nfinal boolean isResponse3xx = responseStatusCode >= 300 && responseStatusCode < 400;\r\nfinal boolean isResponse4xx = responseStatusCode >= 400 && responseStatusCode < 500;\r\nfinal boolean isResponse5xx = responseStatusCode >= 500 && responseStatusCode < 600;\r\nfinal Map<String, List<String>> responseHeaders = response.headers().map();\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":["2.2 Spring ",["$","code",null,{"children":"RestTemplate"}]]}],"\n",["$","p",null,{"children":["以下係 Spring 一直以黎都有既 ",["$","code",null,{"children":"RestTemplate"}]," API。自從 Spring 5，呢個 class 已經係喺 maintenance mode，Spring 建議我地轉用 ",["$","code",null,{"children":"WebClient"}],"。"]}],"\n",["$","p",null,{"children":"構建 client object："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final RestTemplate client = new RestTemplateBuilder()\r\n\t.setConnectTimeout(Duration.ofSeconds(10))\r\n\t.basicAuthentication(\"username\", \"password\")\r\n\t.defaultHeader(\"header1\", \"header1-value\")\r\n\t.defaultHeader(\"header2\", \"header2-value\")\r\n\t.build();\r\n\r\n// 如果加入左 jackson-dataformat-xml\r\n// 令 RestTemplate 唔好喺 Accept request header 度加入 application/xml 或相關既 values\r\nclient.getMessageConverters().removeIf(e -> e.getClass()==MappingJackson2XmlHttpMessageConverter.class);\n"}]}],"\n",["$","p",null,{"children":"發送 request："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String requestBody = \"{ \\\"value\\\": \\\"123\\\" }\";\r\nfinal HttpHeaders requestHeaders = new HttpHeaders();\r\nrequestHeaders.set(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);\r\nrequestHeaders.set(\"header1\", \"header1-value\");\r\nrequestHeaders.set(\"header2\", \"header2-value\");\r\n\r\ntry {\r\n\tfinal ResponseEntity<String> response = client.exchange(\r\n\t\t\"http://localhost:8081/api/order/{orderId}?param1={param1}&param2={param2}\",\r\n\t\tHttpMethod.POST,\r\n\t\tnew HttpEntity<>(requestBody, requestHeaders),\r\n\t\tString.class,\r\n\t\t\"123\",\r\n\t\t\"param1-value\",\r\n\t\t\"param2-value\");\r\n} catch (RestClientResponseException e) {\r\n\t// 4xx 或 5xx responses\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"2xx"}]," 或 ",["$","code",null,{"children":"3xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String responseBody = response.getBody();\r\nfinal int responseStatusCode = response.getStatusCode().value();\r\nfinal boolean isResponse2xx = response.getStatusCode().is2xxSuccessful();\r\nfinal boolean isResponse3xx = response.getStatusCode().is3xxRedirection();\r\nfinal Map<String, List<String>> responseHeaders = response.getHeaders();\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"4xx"}]," 或 ",["$","code",null,{"children":"5xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"} catch (RestClientResponseException e) {\r\n\tfinal String responseBody = e.getResponseBodyAsString();\r\n\tfinal int responseStatusCode = e.getStatusCode().value();\r\n\tfinal boolean isResponse4xx = e.getStatusCode().is4xxClientError();\r\n\tfinal boolean isResponse5xx = e.getStatusCode().is5xxServerError();\r\n\tfinal Map<String, List<String>> responseHeaders = e.getResponseHeaders();\r\n}\n"}]}],"\n",["$","p",null,{"children":"注意："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["某啲 classpath libraries（Maven dependencies）會影響到 Spring ",["$","code",null,{"children":"RestTemplate"}]," 幫我地 send HTTP calls 既時候加入既 ",["$","code",null,{"children":"Accept"}]," request header。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["創建 Spring ",["$","code",null,{"children":"RestTemplate"}]," 既時候，佢會因為喺 classpath 存在既 classes 而去推斷 ",["$","code",null,{"children":"Accept"}]," request header。"]}],"\n",["$","li",null,{"children":["例如 classpath 度有 ",["$","code",null,{"children":"jackson-dataformat-xml"}]," 既話，Spring ",["$","code",null,{"children":"RestTemplate"}]," 就會用左 ",["$","code",null,{"children":"Accept: text/plain, application/xml, text/xml, application/json, application/*+xml, application/*+json, */*"}]," 既 request header 去 send HTTP calls。"]}],"\n",["$","li",null,{"children":["如果呢啲 libraries 係必需，咁我地可以透過刪除 Spring ",["$","code",null,{"children":"RestTemplate"}]," object 裡面既 message converters 去改變佢既 behavior。"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","p",null,{"children":["詳情可以睇返呢篇：",["$","a",null,{"href":"/blog/spring-resttemplate-trap","children":"Spring JSON 變 XML response 問題"}],"。"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":["2.3 Spring Webflux ",["$","code",null,{"children":"WebClient"}]]}],"\n",["$","p",null,{"children":["以下係黎自 Spring Webflux 既 ",["$","code",null,{"children":"WebClient"}]," API。佢支援 synchronous（blocking）以及 asynchronous（non-blocking）既 HTTP calls。"]}],"\n",["$","p",null,{"children":"Spring Boot servlet WebMVC 既項目只要加入 Spring Webflux 既 library 就用得到呢個 client。"}],"\n",["$","p",null,{"children":"構建 client object："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final HttpClient httpClient = HttpClient.newBuilder()\r\n\t.version(Version.HTTP_1_1)\r\n\t.connectTimeout(Duration.ofSeconds(10))\r\n\t.build();\r\n\r\nfinal WebClient client = WebClient.builder()\r\n\t.clientConnector(new JdkClientHttpConnector(httpClient))\r\n\t.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\r\n\t.defaultHeader(\"header1\", \"header1-value\")\r\n\t.defaultHeader(\"header2\", \"header2-value\")\r\n\t.build();\n"}]}],"\n",["$","p",null,{"children":"發送 request："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String requestBody = \"{ \\\"value\\\": \\\"123\\\" }\";\r\n\r\ntry {\r\n\tfinal ResponseEntity<String> response = client.post()\r\n\t\t.uri(\"http://localhost:8081/api/order/{orderId}?param1={param1}&param2={param2}\", \"123\", \"param1-value\", \"param2-value\")\r\n\t\t.headers(headers -> headers.setBasicAuth(\"username\", \"password\"))\r\n\t\t.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\r\n\t\t.header(\"header1\", \"header1-value\")\r\n\t\t.header(\"header2\", \"header2-value\")\r\n\t\t.bodyValue(requestBody)\r\n\t\t.retrieve()\r\n\t\t.toEntity(String.class)\r\n\t\t.block();\r\n} catch (WebClientResponseException e) {\r\n\t// 4xx 或 5xx responses\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"2xx"}]," 或 ",["$","code",null,{"children":"3xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String responseBody = response.getBody();\r\nfinal int responseStatusCode = response.getStatusCode().value();\r\nfinal boolean isResponse2xx = response.getStatusCode().is2xxSuccessful();\r\nfinal boolean isResponse3xx = response.getStatusCode().is3xxRedirection();\r\nfinal Map<String, List<String>> responseHeaders = response.getHeaders();\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"4xx"}]," 或 ",["$","code",null,{"children":"5xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"} catch (WebClientResponseException e) {\r\n\tfinal String responseBody = e.getResponseBodyAsString();\r\n\tfinal int responseStatusCode = e.getStatusCode().value();\r\n\tfinal boolean isResponse4xx = e.getStatusCode().is4xxClientError();\r\n\tfinal boolean isResponse5xx = e.getStatusCode().is5xxServerError();\r\n\tfinal Map<String, List<String>> responseHeaders = e.getHeaders();\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":["2.4 Spring 6.1 ",["$","code",null,{"children":"RestClient"}]]}],"\n",["$","p",null,{"children":["以下係 Spring 6.1 新加入既 ",["$","code",null,{"children":"RestClient"}]," API。佢支援 synchronous（blocking）既 HTTP calls。"]}],"\n",["$","p",null,{"children":"用呢個 client 既話，就唔需要再喺 Spring Boot servlet WebMVC 既項目加入 Spring Webflux 既 library。"}],"\n",["$","p",null,{"children":"構建 client object："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final RestClient client = RestClient.builder()\r\n\t.defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\r\n\t.defaultHeader(\"header1\", \"header1-value\")\r\n\t.defaultHeader(\"header2\", \"header2-value\")\r\n\t.build();\n"}]}],"\n",["$","p",null,{"children":"發送 request："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String requestBody = \"{ \\\"value\\\": \\\"123\\\" }\";\r\n\r\ntry {\r\n\tfinal ResponseEntity<String> response = client.post()\r\n\t\t.uri(\"http://localhost:8081/api/order/{orderId}?param1={param1}&param2={param2}\", \"123\", \"param1-value\", \"param2-value\")\r\n\t\t.headers(headers -> headers.setBasicAuth(\"username\", \"password\"))\r\n\t\t.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\r\n\t\t.header(\"header1\", \"header1-value\")\r\n\t\t.header(\"header2\", \"header2-value\")\r\n\t\t.body(requestBody)\r\n\t\t.retrieve()\r\n\t\t.toEntity(String.class);\r\n} catch (RestClientResponseException e) {\r\n\t// 4xx 或 5xx responses\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"2xx"}]," 或 ",["$","code",null,{"children":"3xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String responseBody = response.getBody();\r\nfinal int responseStatusCode = response.getStatusCode().value();\r\nfinal boolean isResponse2xx = response.getStatusCode().is2xxSuccessful();\r\nfinal boolean isResponse3xx = response.getStatusCode().is3xxRedirection();\r\nfinal Map<String, List<String>> responseHeaders = response.getHeaders();\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"4xx"}]," 或 ",["$","code",null,{"children":"5xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"} catch (RestClientResponseException e) {\r\n\tfinal String responseBody = e.getResponseBodyAsString();\r\n\tfinal int responseStatusCode = e.getStatusCode().value();\r\n\tfinal boolean isResponse4xx = e.getStatusCode().is4xxClientError();\r\n\tfinal boolean isResponse5xx = e.getStatusCode().is5xxServerError();\r\n\tfinal Map<String, List<String>> responseHeaders = e.getResponseHeaders();\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.5 Spring Cloud OpenFeign"}],"\n",["$","p",null,{"children":"Spring Cloud OpenFeign 將開源既 Feign library（本來係 Netflix，但之後開源成為 OpenFeign）整合到 Spring Cloud framework 裡面。"}],"\n",["$","p",null,{"children":"用 Spring Cloud OpenFeign 既好處係佢係 declarative，基本上將需要用到 upstream apps 既 declarative request mappings 搬入黎我地既 downstream app project 就得。"}],"\n",["$","p",null,{"children":"構建 client object："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@FeignClient(\r\n\tname = \"fooClient\",\r\n\tconfiguration = FooFeignConfig.class\r\n)\r\npublic interface FooFeignClient {\r\n\r\n\t// 注意：\r\n\t// consumes ➜ Content-Type request header\r\n\t// produces ➜ Accept request header\r\n\r\n\t@PostMapping(path = \"/api/order/{orderId}\", consumes = MediaType.APPLICATION_JSON_VALUE)\r\n\tResponseEntity<String> api(@PathVariable(\"orderId\") String orderId,\r\n\t\t\t\t\t\t\t\t@RequestParam(name = \"param1\", required = false) String param1,\r\n\t\t\t\t\t\t\t\t@RequestParam(name = \"param2\", required = false) String param2,\r\n\t\t\t\t\t\t\t\t@RequestBody String body,\r\n\t\t\t\t\t\t\t\t@RequestHeader(\"header1\") String header1,\r\n\t\t\t\t\t\t\t\t@RequestHeader(\"header2\") String header2);\r\n}\n"}]}],"\n",["$","p",null,{"children":"Basic auth Spring configuration："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"// 如果加 @Configuration，呢個 config 就會係所有 Feign clients 既默認 config\r\npublic class FooFeignConfig {\r\n\r\n\t@Bean\r\n\tpublic BasicAuthRequestInterceptor fooBasicAuthInterceptor() {\r\n\t\treturn new BasicAuthRequestInterceptor(\"username\", \"password\");\r\n\t}\r\n}\n"}]}],"\n",["$","p",null,{"children":"Application 配置："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"spring.cloud.openfeign.client.config:\r\n    default:\r\n        connectTimeout: 10000\r\n        loggerLevel: FULL\r\n    fooClient:\r\n        connectTimeout: 10000\r\n        loggerLevel: FULL\r\n        url: http://localhost:8081\r\n        defaultRequestHeaders:\r\n            header1: header1-value\r\n            header2: header2-value\r\n\r\nlogging:\r\n    level:\r\n        my.package.FooFeignClient: DEBUG\n"}]}],"\n",["$","p",null,{"children":"發送 request："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Autowired\r\nFooFeignClient client;\r\n\r\npublic void sampleCall() {\r\n\tfinal String requestBody = \"{ \\\"value\\\": \\\"123\\\" }\";\r\n\r\n\ttry {\r\n\t\tfinal ResponseEntity<String> response =\r\n\t\t\tclient.api(\"123\", \"param1-value\", \"param2-value\", requestBody, \"header1-value\", \"header2-value\");\r\n\t} catch (FeignException e) {\r\n\t\t// 3xx、4xx 或 5xx responses\r\n\t}\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"2xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final String responseBody = response.getBody();\r\nfinal int responseStatusCode = response.getStatusCode().value();\r\nfinal boolean isResponse2xx = response.getStatusCode().is2xxSuccessful();\r\nfinal Map<String, List<String>> responseHeaders = response.getHeaders();\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"3xx"}],"、",["$","code",null,{"children":"4xx"}]," 或 ",["$","code",null,{"children":"5xx"}]," responses："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"} catch (FeignException e) {\r\n\tfinal String responseBody = e.contentUTF8();\r\n\tfinal int responseStatusCode = e.status();\r\n\tfinal boolean isResponse3xx = e.status() >= 300 && e.status() < 400;\r\n\tfinal boolean isResponse4xx = e.status() >= 400 && e.status() < 500;\r\n\tfinal boolean isResponse5xx = e.status() >= 500 && e.status() < 600;\r\n\tfinal Map<String, Collection<String>> responseHeaders = e.responseHeaders();\r\n}\n"}]}],"\n",["$","p",null,{"children":"注意："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["需要喺某個 Spring config class 度加上 ",["$","code",null,{"children":"@EnableFeignClients"}],"，否則唔會生成 Feign client objects。"]}],"\n",["$","li",null,{"children":["Feign clients 裡面既 request mapping methods 既 API contract 應該係要 match 返 target upstream app 既 request mapping methods。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"consumes"}]," ➜ ",["$","code",null,{"children":"Content-Type"}]]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"produces"}]," ➜ ",["$","code",null,{"children":"Accept"}]]}],"\n",["$","li",null,{"children":["❌ 唔好以為 ",["$","code",null,{"children":"produces"}]," 指既係呢個 app 所產生既 request body 既 ",["$","code",null,{"children":"Content-Type"}],"，咁樣係錯既。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["如果唔畀 ",["$","code",null,{"children":"consumes"}]," attribute，佢會根據 method signature 自動推斷 ",["$","code",null,{"children":"Content-Type"}]," request header 既 value。"]}],"\n",["$","li",null,{"children":["就算 Feign client method 既 return type 係 ",["$","code",null,{"children":"ResponseEntity"}],"，當 response status code 唔係 ",["$","code",null,{"children":"2xx"}]," 既時候，佢會照 throw exception。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["❌ 唔好諗住 return ",["$","code",null,{"children":"ResponseEntity"}]," 就可以拎到 response status code 然後 apply 自己既 logic，呢個係做唔到既。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["⚠️ 某啲 Spring Cloud OpenFeign ",["$","code",null,{"children":"4.x"}]," 版本有個 bug，當我地喺 ",["$","code",null,{"children":"@FeignClient"}]," 定義左 ",["$","code",null,{"children":"path"}]," attribute（以免喺 request mapping annotations 度重複 common path prefix），而 target upstream app 既 URL 係喺 application 配置檔度定義，佢就會出 exception ",["$","code",null,{"children":"target values must be absolute."}],"，呢個 bug 應該會喺後期版本修復。"]}],"\n"]}],"\n",["$","p",null,{"children":"參考資料："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://github.com/spring-cloud/spring-cloud-openfeign/issues/923","children":"GitHub - spring-cloud/spring-cloud-openfeign - Incorrect resolved url when the FeignClient.path is set and the base url is defined in the properties file"}]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"3 參考資料"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://docs.spring.io/spring-framework/reference/integration/rest-clients.html","children":"Spring 官方文檔 - REST Clients"}]}],"\n"]}]],null,["$","$Lf",null,{"children":"$L10"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","An81kBCQxQjxIOqwAdm8T",{"children":[["$","$L11",null,{"children":"$L12"}],["$","$L13",null,{"children":"$L14"}],null]}]]}],false]],"m":"$undefined","G":["$15","$undefined"],"s":false,"S":true}
14:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
12:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
10:null
