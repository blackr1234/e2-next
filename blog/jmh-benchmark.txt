1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
14:I[6213,[],"OutletBoundary"]
16:I[6213,[],"MetadataBoundary"]
18:I[6213,[],"ViewportBoundary"]
1a:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
f:T6d1,<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>3.0.6</version>
</parent>

<dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-dependencies</artifactId>
			<version>2022.0.2</version>
			<type>pom</type>
			<scope>import</scope>
		</dependency>
	</dependencies>
</dependencyManagement>

<dependencies>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
	</dependency>

	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-devtools</artifactId>
	</dependency>

	<dependency>
		<groupId>commons-io</groupId>
		<artifactId>commons-io</artifactId>
		<version>2.11.0</version>
	</dependency>

	<dependency>
		<groupId>org.openjdk.jmh</groupId>
		<artifactId>jmh-core</artifactId>
		<version>1.36</version>
	</dependency>
	<dependency>
		<groupId>org.openjdk.jmh</groupId>
		<artifactId>jmh-generator-annprocess</artifactId>
		<version>1.36</version>
	</dependency>
</dependencies>

<build>
	<plugins>
		<plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
			<version>3.0.6</version>
			<configuration>
				<mainClass>code.jmh.JmhApplication</mainClass> <!-- 只限測試用 -->
			</configuration>
			<executions>
				<execution>
					<goals>
						<goal>repackage</goal>
					</goals>
				</execution>
			</executions>
		</plugin>
	</plugins>
</build>
10:T50b,public class JmhApplication {

    public static void main(String [] args) throws Exception {

        final File resultFile = createResultFile();

        final Options opt = new OptionsBuilder()
                .include(BenchmarkPackageRef.class.getPackageName())
                .shouldDoGC(true)
                .shouldFailOnError(true)
                .resultFormat(ResultFormatType.JSON)
                .result(resultFile.getAbsolutePath())
                .build();

        new Runner(opt).run();

        printResultFile(resultFile);
    }

    private static File createResultFile() throws Exception {
        try {
            final File file = Files.createTempFile("jmh-results", ".json").toFile();
            file.deleteOnExit();
            System.out.println("Created JMH result file: " + file.getAbsolutePath());

            return file;
        } catch (Exception e) {
            System.err.println("Failed to create result file for JMH.");
            throw e;
        }
    }

    private static void printResultFile(File resultFile) throws Exception {
        System.out.println("Printing file content of " + resultFile.getAbsolutePath() + ":");
        System.out.println(FileUtils.readFileToString(resultFile, "UTF-8"));
    }
}
11:Tacc,# JMH version: 1.36
# VM version: JDK 17.0.7, OpenJDK 64-Bit Server VM, 17.0.7+7-LTS
# VM invoker: C:\Users\Michael\Desktop\Apps\msjdk17\bin\java.exe
# VM options: -server
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each
# Measurement: 20 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: code.jmh.benchmarks.AppStartupBenchmark.benchmarkAppStartup

# Run progress: 0.00% complete, ETA 00:04:10
# Fork: 1 of 1
# Warmup Iteration   1: 220.079 ms/op
# Warmup Iteration   2: 129.138 ms/op
# Warmup Iteration   3: 105.157 ms/op
# Warmup Iteration   4: 97.996 ms/op
# Warmup Iteration   5: 89.844 ms/op
Iteration   1: 89.442 ms/op
Iteration   2: 89.301 ms/op
Iteration   3: 87.922 ms/op
Iteration   4: 86.586 ms/op
Iteration   5: 87.189 ms/op
Iteration   6: 85.913 ms/op
Iteration   7: 88.044 ms/op
Iteration   8: 86.758 ms/op
Iteration   9: 86.637 ms/op
Iteration  10: 86.204 ms/op
Iteration  11: 87.040 ms/op
Iteration  12: 87.521 ms/op
Iteration  13: 87.171 ms/op
Iteration  14: 89.843 ms/op
Iteration  15: 85.210 ms/op
Iteration  16: 84.815 ms/op
Iteration  17: 84.768 ms/op
Iteration  18: 88.859 ms/op
Iteration  19: 84.887 ms/op
Iteration  20: 87.541 ms/op


Result "code.jmh.benchmarks.AppStartupBenchmark.benchmarkAppStartup":
  87.083 ±(99.9%) 1.334 ms/op [Average]
  (min, avg, max) = (84.768, 87.083, 89.843), stdev = 1.536
  CI (99.9%): [85.749, 88.416] (assumes normal distribution)


# Run complete. Total time: 00:04:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                Mode  Cnt   Score   Error  Units
AppStartupBenchmark.benchmarkAppStartup  avgt   20  87.083 ± 1.334  ms/op
12:T5f8,[
	{
		"jmhVersion": "1.36",
		"benchmark": "code.jmh.benchmarks.AppStartupBenchmark.benchmarkAppStartup",
		"mode": "avgt",
		"threads": 1,
		"forks": 1,
		"jvm": "C:\\Users\\Michael\\Desktop\\Apps\\msjdk17\\bin\\java.exe",
		"jvmArgs": ["-server"],
		"jdkVersion": "17.0.7",
		"vmName": "OpenJDK 64-Bit Server VM",
		"vmVersion": "17.0.7+7-LTS",
		"warmupIterations": 5,
		"warmupTime": "10 s",
		"warmupBatchSize": 1,
		"measurementIterations": 20,
		"measurementTime": "10 s",
		"measurementBatchSize": 1,
		"primaryMetric": {
			"score": 87.08259406398619,
			"scoreError": 1.3338545207641799,
			"scoreConfidence": [85.74873954322202, 88.41644858475037],
			"scorePercentiles": {
				"0.0": 84.76841401869159,
				"50.0": 87.10552132326006,
				"90.0": 89.42742431372548,
				"95.0": 89.82311887254902,
				"99.0": 89.84320392156863,
				"99.9": 89.84320392156863,
				"99.99": 89.84320392156863,
				"99.999": 89.84320392156863,
				"99.9999": 89.84320392156863,
				"100.0": 89.84320392156863
			},
			"scoreUnit": "ms/op",
			"rawData": [
				[
					89.44150294117647, 89.30071666666667, 87.92223269230769, 86.58622761904762, 87.18889134615385,
					85.91300943396226, 88.0441, 86.75808476190477, 86.63733428571429, 86.20367047619048,
					87.03976476190476, 87.52096153846153, 87.17127788461538, 89.84320392156863, 85.20977196261683,
					84.81511214953271, 84.76841401869159, 88.85933203883495, 84.88701028037383, 87.5412625
				]
			]
		},
		"secondaryMetrics": {}
	}
]
13:T81a,Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain
Caused by: java.lang.ClassNotFoundException: org.openjdk.jmh.runner.ForkedMain
<forked VM failed with exit code 1>
<stdout last='20 lines'>
</stdout>
<stderr last='20 lines'>
Error: Could not find or load main class org.openjdk.jmh.runner.ForkedMain
Caused by: java.lang.ClassNotFoundException: org.openjdk.jmh.runner.ForkedMain
</stderr>

Benchmark had encountered error, and fail on error was requested
Exception in thread "main" java.lang.reflect.InvocationTargetException
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:566)
        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49)
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:108)
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:58)
        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:65)
Caused by: org.openjdk.jmh.runner.RunnerException: Benchmark caught the exception
        at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:575)
        at org.openjdk.jmh.runner.Runner.internalRun(Runner.java:310)
        at org.openjdk.jmh.runner.Runner.run(Runner.java:209)
        at code.jmh.JmhApplication.main(JmhApplication.java:28)
        ... 8 more
Caused by: org.openjdk.jmh.runner.BenchmarkException: Benchmark error
        at org.openjdk.jmh.runner.Runner.doFork(Runner.java:768)
        at org.openjdk.jmh.runner.Runner.runSeparate(Runner.java:660)
        at org.openjdk.jmh.runner.Runner.runBenchmarks(Runner.java:558)
        ... 11 more
        Suppressed: java.lang.IllegalStateException: Forked VM failed with exit code 1
                ... 14 more
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","jmh-benchmark"],"i":false,"f":[[["",{"children":["blog",{"children":["(2023-05)",{"children":["jmh-benchmark",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2023-05)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2023-05)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["jmh-benchmark",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2023-05)","children","jmh-benchmark","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"1 JMH 簡介"}],"\n",["$","p",null,{"children":"Java Microbenchmark Harness（JMH）係一個用黎做 benchmark Java 程式既一套 library。"}],"\n",["$","p",null,{"children":"佢可以話畀我地知一個 Java method："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"平均需要幾長時間去執行（average time）"}],"\n",["$","li",null,{"children":"一秒鐘執行到幾多次（throughput）"}],"\n"]}],"\n",["$","h2",null,{"children":"1.1 使用場景"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"想改善某個 method 既執行速度，例如寫 algorithm。"}],"\n",["$","li",null,{"children":"想比較 Java 或者 Maven dependency 版本 upgrade 帶黎既性能差別。"}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"2 動手寫"}],"\n",["$","p",null,{"children":"Project structure："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"src/main/java"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"/code"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"/jmh"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"/benchmarks"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","code",null,{"children":"AppStartupBenchmark.java"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"BenchmarkPackageRef.java"}]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"JmhApplication.java"}]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"ApplicationController.java"}]}],"\n",["$","li",null,{"children":["$","code",null,{"children":"MainApplication.java"}]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"src/main/resources"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","code",null,{"children":"application.yml"}]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"children":"2.1 Maven dependencies"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-xml","children":"$f"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.2 Java code"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"JmhApplication.java"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"$10"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"BenchmarkPackageRef.java"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"public final class BenchmarkPackageRef {\r\n\r\n    private BenchmarkPackageRef() {}\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"AppStartupBenchmark.java"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Warmup(iterations = 5)\r\n@Measurement(iterations = 20)\r\n@State(Scope.Benchmark)\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n@Threads(1)\r\n@Fork(value = 1, jvmArgs = { \"-server\" })\r\npublic class AppStartupBenchmark {\r\n\r\n    ConfigurableApplicationContext context;\r\n\r\n    @Setup(Level.Invocation)\r\n    public void init() {\r\n\r\n    }\r\n\r\n    @TearDown(Level.Invocation)\r\n    public void finish() {\r\n        if (context!=null && context.isRunning()) {\r\n            context.close();\r\n        }\r\n    }\r\n\r\n    // 我地測試緊 Spring Boot startup 以及 Spring context 初始化\r\n    @Benchmark\r\n    public void benchmarkAppStartup() {\r\n        context = SpringApplication.run(MainApplication.class);\r\n        Assert.notNull(context.getBean(MyController.class), \"Controller bean should not be null.\");\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"MainApplication.java"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@SpringBootApplication\r\npublic class MainApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MainApplication.class, args);\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"MyController.java"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@RestController\r\npublic class MyController {\r\n\r\n    @GetMapping\r\n    public String helloWorld() {\r\n        return \"hello world\";\r\n    }\r\n}\n"}]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"application.yml"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"logging.level.root: ERROR\r\nspring.main.banner-mode: off\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"3 執行 benchmark"}],"\n",["$","p",null,{"children":"有兩個方式："}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"IDE 裡面作為 Java app 咁執行"}],"\n",["$","li",null,{"children":"Build 左 JAR 檔之後執行"}],"\n"]}],"\n",["$","h2",null,{"children":"3.1 IDE 裡面執行"}],"\n",["$","p",null,{"children":"（以下適用於 Eclipse）"}],"\n",["$","p",null,{"children":["先確保 Eclipse 有安裝到 ",["$","code",null,{"children":"m2e-apt"}],"，亦都 enable 左 annotation processing。"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"Update 個 Maven project。"}],"\n",["$","li",null,{"children":["將 ",["$","code",null,{"children":"JmhApplication"}]," class 作為 Java app 咁執行。"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.2 執行 JAR artifact"}],"\n",["$","p",null,{"children":"我地要 build 左個 JAR 檔出黎，然後執行佢："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"mvn clean package\n"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"cd target\r\njava -jar spring-boot-jmh-1.0.0.jar\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"4 Benchmark 結果樣本"}],"\n",["$","p",null,{"children":"註："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["我地用既 benchmark mode 係 average time。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["所以 score 既單位係 ",["$","code",null,{"children":"ms/op"}],"，呢個數字係越低越好。"]}],"\n",["$","li",null,{"children":"每個 iteration 執行既 operations 次數由 JMH 決定。"}],"\n",["$","li",null,{"children":"如果 benchmark mode 用 all，佢會用唔同既 benchmark mode 執行同一個 benchmark。"}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"children":"4.1 Console log"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$11"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.2 JMH result 檔案"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-json","children":"$12"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"5 已知問題"}],"\n",["$","h2",null,{"children":"5.1 ClassNotFoundException：ForkedMain"}],"\n",["$","p",null,{"children":["當我地用舊版既 Spring Boot ",["$","code",null,{"children":"2.7.x"}]," 而又配置左 ",["$","code",null,{"children":"@Fork(value = 1)"}]," 既話，當我地 build 左個 JAR 檔然後執行佢，就會出現下面既 error。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$13"}]}],"\n",["$","p",null,{"children":["最快捷既解決方法係配置 ",["$","code",null,{"children":"@Fork(value = 0)"}],"，但係 JMH 只係建議喺 debug 既時候唔用 fork。另外唔用 fork 都有個壞處，就係我地會 apply 唔到 JVM args。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"# Fork: N/A, test runs in the host VM\r\n# *** WARNING: Non-forked runs may silently omit JVM options, mess up profilers, disable compiler hints, etc. ***\r\n# *** WARNING: Use non-forked runs only for debugging purposes, not for actual performance runs. ***\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"6 參考資料"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://mkyong.com/java/java-jmh-benchmark-tutorial/","children":"Java JMH Benchmark Tutorial"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://jenkov.com/tutorials/java-performance/jmh.html","children":"JMH - Java Microbenchmark Harness"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://gist.github.com/msievers/ce80d343fc15c44bea6cbb741dde7e45","children":"[Spring, JMH] Howto integrate JMH benchmarks with Spring"}]}],"\n"]}]],null,["$","$L14",null,{"children":"$L15"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","q6Epsop7j7iCAuefaApAC",{"children":[["$","$L16",null,{"children":"$L17"}],["$","$L18",null,{"children":"$L19"}],null]}]]}],false]],"m":"$undefined","G":["$1a","$undefined"],"s":false,"S":true}
19:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
17:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
15:null
