1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
18:I[6213,[],"OutletBoundary"]
1a:I[6213,[],"MetadataBoundary"]
1c:I[6213,[],"ViewportBoundary"]
1e:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
f:Tf23,import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.MGF1ParameterSpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.OAEPParameterSpec;
import javax.crypto.spec.PSource;

record RsaKeyPair(String publicKey, String privateKey) {}

public class Test {

    public static RsaKeyPair createRsaKeyPair() throws Exception {
        final KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
        keyPairGen.initialize(4096);

        final KeyPair keyPair = keyPairGen.generateKeyPair();
        final RsaKeyPair rsaKeyPair = new RsaKeyPair(
                Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded()),
                Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded()));

        return rsaKeyPair;
    }

    public static PublicKey getPublicKey(String publicKey) throws Exception {
        final byte[] keyBytes = Base64.getDecoder().decode(publicKey);
        final X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);
        final KeyFactory keyFactory = KeyFactory.getInstance("RSA");

        return keyFactory.generatePublic(keySpec);
    }

    public static PrivateKey getPrivateKey(String privateKey) throws Exception {
        final byte[] keyBytes = Base64.getDecoder().decode(privateKey);
        final PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);
        final KeyFactory keyFactory = KeyFactory.getInstance("RSA");

        return keyFactory.generatePrivate(keySpec);
    }

    public static String encrypt(String plaintext, String publicKey) throws Exception {
        final PublicKey key = getPublicKey(publicKey);
        final Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPPadding");
        final OAEPParameterSpec oaepParams = new OAEPParameterSpec(
            "SHA-256",
            "MGF1",
            new MGF1ParameterSpec("SHA-256"),
            PSource.PSpecified.DEFAULT
        );
        cipher.init(Cipher.ENCRYPT_MODE, key, oaepParams);

        final byte[] decryptedData = cipher.doFinal(plaintext.getBytes());

        return Base64.getEncoder().encodeToString(decryptedData);
    }

    public static String decrypt(String ciphertext, String privateKey) throws Exception {
        final PrivateKey key = getPrivateKey(privateKey);
        final Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPPadding");
        final OAEPParameterSpec oaepParams = new OAEPParameterSpec(
            "SHA-256",
            "MGF1",
            new MGF1ParameterSpec("SHA-256"),
            PSource.PSpecified.DEFAULT
        );
        cipher.init(Cipher.DECRYPT_MODE, key, oaepParams);

        final byte[] encryptedData = Base64.getDecoder().decode(ciphertext);
        final byte[] decryptedData = cipher.doFinal(encryptedData);

        return new String(decryptedData);
    }

    public static void main(String[] args) throws Exception {

        final RsaKeyPair rsaKeyPair = createRsaKeyPair();

        System.out.println("Public key: " + rsaKeyPair.publicKey());
        System.out.println();
        System.out.println("Private key: " + rsaKeyPair.privateKey());
        System.out.println();

        final String originalData = "java-michael";
        System.out.println("Original data: " + originalData);

        final String ciphertext = encrypt(originalData, rsaKeyPair.publicKey());
        System.out.println("Ciphertext: " + ciphertext);

        final String plaintext = decrypt(ciphertext, rsaKeyPair.privateKey());
        System.out.println("Plaintext: " + plaintext);
    }
}
10:T1250,Public key: MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAtj2yxia3eM1BW6TfdzEyoDBFXkaoxXRi6noLj/aVdb7/H2a8OBawY1g4DADQAEmNidQ4HTwWbCf20tupMGgpzHPeDZVaT2tCDTdBMMEYjdSAVUvTyqtAxwZqWPZSWJux5jC6drc2+KXGIBqfLEDF/LgR3aLWkq517+VOWnma4dKYLuTBU15iwk8lsyJmrIzflBgBfw1FIjiFBKAmXbQGEWvJX4/RWAQAOVuh9PTmNwfQrXQSfQtwM4WVH7rDbpUeN76YFZ4rQrSUAlrrfhwhrp6mOgL8JrvyIOUuyaYV/+qlH3h6iZ/9z7VGBhBROYGhLBZddlRfGFUZPfMoSXDc9GA8Q67r9II4TshHiRrBBkckFN9WrfgOVj66LuUHYjbNpep9lKLOY2okgMm2763FHFbRha8gNuDIJBwyHHeno782UUROW1V+gKZx/nGW8HW1XeZrQQkkU9DVxPABGu+REsrqN458oysYVeghtkEybJKIcuEwRyAPijm+4YXiX9MOxumogCsbDrdRo9YkC177rSZTRoNEbXhZftflFXZxYJDB1P51F3owUU22hZFSbt7GoBpTYiHvyOMjHXwKf5O63+ghftNuyEGJ6GoFpnlmN6NQFReTUv4r7JlbVU4s9A82Ertg+ORc8/gpcgT9+Pd3MLf2L/EZ5n4rUekqdo93HbsCAwEAAQ==

Private key: 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

Original data: java-michael
Ciphertext: RIHK2gxWRT1D1jW4Jjswqw+3vLD9n1iOG8YYaYn4+/tEbKdOY8XE4Tw/QWM7AlmLq0Ein5HDZND7GG7tS2a8vDj6baItbZRchYXfTsCRPKTvJAy3Ai7IOhgRr92gGZQ+0a4jY2p+qIHtiApDztCUPCuhtY5QXF7vIY+yOZLFTUQ5+dwLz/WCVKsALlklPn0BNGu5rqD2zeUwYWrJwBZcc0/LLJmCMVeW0gCVnxfcft5ahYwWn5ID3eY5x05ipSyA1NA47/DPsxPTprMzOsONITQm3MlHv7oSAhaPAGklwAoSmWCcxC/x5NazswcVojyVhKI6yFC4MPruDOyL/gZRVMUM+EMTNBF+FwQrFTTuVcrQNKZiZO5fagV1LAeJd1kGGyd9EeKoSttUUvLjphxIKD6/nIlqS0P0LDTI4x6ESXJg4u5q2cAYBtux/S65NndXz+X4Kc2v8BtDE9TT8Nb1ttiC3iQaSEvE3ij9W/NW1PMZHyS+nzi+r+3NFuJNjwnBxyqEF+p46D7Ocrm6oS+G9WT/zDldOnkQ+v1dEJDCJrQqpBxe7K8zNJ6p9ujn96eXUyZUT1gKlRuFjDdDOm5wsWRLhYz+g/hgzA6p+h9UHbpspfr89E1ducrx8Xk7odOl1vtHT07M9DnBpPAm/LRJnIH0Y7AuRddtwpG3uGCDiAQ=
Plaintext: java-michael
11:Taa7,const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

async function createRsaKeyPair() {
	const { publicKey, privateKey } = await crypto.subtle.generateKey(
		{
			name: "RSA-OAEP",
			modulusLength: 4096,
			publicExponent: new Uint8Array([1, 0, 1]),
			hash: "SHA-256",
		},
		true,
		["encrypt", "decrypt"]
	);

	const exportedPublicKey = await crypto.subtle.exportKey("spki", publicKey);
	const exportedPrivateKey = await crypto.subtle.exportKey("pkcs8", privateKey);

	const publicKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(exportedPublicKey)));
	const privateKeyBase64 = btoa(String.fromCharCode.apply(null, new Uint8Array(exportedPrivateKey)));

	return {
		publicKey: publicKeyBase64,
		privateKey: privateKeyBase64,
	};
}

async function importPublicKey(pem) {
	const pemArr = Uint8Array.from(atob(pem), (c) => c.charCodeAt(0));

	return await crypto.subtle.importKey(
		"spki",
		pemArr,
		{
			name: "RSA-OAEP",
			hash: "SHA-256",
		},
		true,
		["encrypt"]
	);
}

async function importPrivateKey(pem) {
	const pemArr = Uint8Array.from(atob(pem), (c) => c.charCodeAt(0));

	return await crypto.subtle.importKey(
		"pkcs8",
		pemArr,
		{
			name: "RSA-OAEP",
			hash: "SHA-256",
		},
		true,
		["decrypt"]
	);
}

async function encrypt(plainText, publicKeyPem) {
	const publicKey = await importPublicKey(publicKeyPem);
	const encoded = textEncoder.encode(plainText);
	const encrypted = await crypto.subtle.encrypt(
		{
			name: "RSA-OAEP",
		},
		publicKey,
		encoded
	);

	return arrToBase64(encrypted);
}

async function decrypt(ciphertext, privateKeyPem) {
	const privateKey = await importPrivateKey(privateKeyPem);
	const encoded = Uint8Array.from(atob(ciphertext), (c) => c.charCodeAt(0));
	const decrypted = await crypto.subtle.decrypt(
		{
			name: "RSA-OAEP",
		},
		privateKey,
		encoded
	);

	return textDecoder.decode(decrypted);
}

function arrToBase64(arr) {
	let binary = "";
	const bytes = new Uint8Array(arr);
	for (let i = 0; i < bytes.byteLength; i++) {
		binary += String.fromCharCode(bytes[i]);
	}

	return btoa(binary);
}

async function main() {
	const { publicKey, privateKey } = await createRsaKeyPair();

	console.log("Public key: " + publicKey);
	console.log();
	console.log("Private key: " + privateKey);
	console.log();

	const originalData = "javascript-michael";
	console.log("Original data: " + originalData);

	const ciphertext = await encrypt(originalData, publicKey);
	console.log("Ciphertext: " + ciphertext);

	const plaintext = await decrypt(ciphertext, privateKey);
	console.log("Plaintext: " + plaintext);
}

main();
12:T125c,Public key: MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEArsGDlMfvNfGO6R3/bjPnAxFd68utLNlFFuawWHLqBgFCSQbZrJIc5Gl0Oi1qWu89KS5OKWSUOLSusRojk3U5Kkl3c+uZgGETjAtC1XQtmXBdl7nQIWgphKvrmRpOjuWZnImkq8F9yyADGe9luV+7synOosb/A4ow6bn98pBr7peopRE42evBzjUawnitDMR6iqpablNZ2p5TkfC210A428nYwokYLQlnpfGCqemLBTNssM4Fub/7vWEEZCyVLRmJV4/9Hm9plXwhPBi118UXn7gfoyJJg8b3tnOhp5K/uiPXY5DEdIdCg9/vvgEEvdzu0pR6iCjYNvt30MFPCw8XXVr+294yNG9u0YExiCEL+TRC/aga+2kpil5Wqt/lksqrGF7YW9wLx4haZSEP/yCpKw0CPYXqu5369w4XPU7Bx3izPINMb6bqV35gubsJHSHSya50scDK8pR1aB1KQipI5q8uNsBvJy6pAUjVpU0bHm2OIfh/0dBe7LwpPqAH5pecXxhIKfNYq2vV5Q1Cc/Wln4NzCX6BLON0jRIbCmePV/ibvEYzdAxhqeIjpcft+OyD1E9XyUhUv5GzYgPN0sFY/mK9SFWEBbe4wEEFFMatJEMt5B1b6XZ1nZtcSAawgaj9RqxdYBIZ7V+4RkhpgQUiLrplEMAy17MyukveGgvYJOECAwEAAQ==

Private key: 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

Original data: javascript-michael
Ciphertext: RMwLcEyk2vZDLlZrVv4XsIVdcFdirxeLu7l09vjw4IrZOEsg37Y9Aus4QdxritNrB4DLjhQa5LlLKua42fF4ZIVgHMYv64IV190OYqXsZn+aqeEvqPEFMc9x0V8+uVE9lAEsI2IxyaCncyoEthn887m16KiGqYDJMoCxFuHWw6rZPG3WbqKOoxhYWBaB3FoRnV6+/D9nCp0hxuHX3JnpB+a7TtMTOmajsM+GigD9lL9GM73Ox7OttJdWKJL8b2MvQiDAHBhiut/zq8ctlGCJC/8UyvyN27rwzenzFZawCKO/8tg3/uzn7/spc38/TPP96jfdNCKT0Uz0rEJiYlE1erzNiGPKY/kvSQa9NCbYGwVLrcPxjFU6WSXoyuo1aUbO9lihv2esDZv0zVrQVGgeBe1GieRNt0cnYOk/JSmuXupKwwlpZqWa6r6kDkn6UCmbVxkDkeYt2FyYBluXr7PWOX5JGsFSVzltYCHwpNX03v7d9Jkne9NcT8JXHD77NycaFPHavolTv7PMcQg43HuJ2UMhphrpwDfGMrC4bducpDe4EM6NfrBlkVgGrFUvGdZRyFtLjsFFb2cGxMxc4rymHRxj1ITTPA6Wj1sioOAd1skr/flFrA70dEem/3SsKICBZRBwEcV1owXm0sOwSXkPVxxcOdORo/nzy/0a2Q1gpMk=
Plaintext: javascript-michael
13:Tf12,import java.security.SecureRandom;
import java.security.spec.KeySpec;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class Test {
    private static final String ALGORITHM = "AES/GCM/NoPadding";
    private static final int KEY_SIZE = 256;
    private static final int ITERATION_COUNT = 100000;
    private static final int TAG_LENGTH = 128;
    private static final int IV_BYTES = 12;
    private static final int SALT_BYTES = 16;

    public static String encrypt(String plaintext, String password) throws Exception {
        return encrypt(plaintext, password, null);
    }

    public static String encrypt(String plaintext, String password, String aad) throws Exception {
        final byte[] salt = generateRandomBytes(SALT_BYTES);
        final SecretKey keySpec = deriveKeyFromPassword(password, salt);

        final Cipher cipher = Cipher.getInstance(ALGORITHM);
        final byte[] iv = generateRandomBytes(IV_BYTES);
        final GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, gcmParameterSpec);
        if (aad!=null) {
            cipher.updateAAD(aad.getBytes());
        }

        final byte[] ciphertext = cipher.doFinal(plaintext.getBytes());

        return Base64.getEncoder().encodeToString(ciphertext)
                + ":" + Base64.getEncoder().encodeToString(iv)
                + ":" + Base64.getEncoder().encodeToString(salt);
    }

    public static String decrypt(String ciphertext, String password) throws Exception {
        return decrypt(ciphertext, password, null);
    }

    public static String decrypt(String ciphertext, String password, String aad) throws Exception {
        final String[] parts = ciphertext.split(":");
        final byte[] encryptedData = Base64.getDecoder().decode(parts[0]);
        final byte[] iv = Base64.getDecoder().decode(parts[1]);
        final byte[] salt = Base64.getDecoder().decode(parts[2]);

        final SecretKey keySpec = deriveKeyFromPassword(password, salt);
        final Cipher cipher = Cipher.getInstance(ALGORITHM);
        final GCMParameterSpec gcmParameterSpec = new GCMParameterSpec(TAG_LENGTH, iv);
        cipher.init(Cipher.DECRYPT_MODE, keySpec, gcmParameterSpec);
        if (aad!=null) {
            cipher.updateAAD(aad.getBytes());
        }

        final byte[] decryptedData = cipher.doFinal(encryptedData);

        return new String(decryptedData);
    }

    private static SecretKey deriveKeyFromPassword(String password, byte[] salt) throws Exception {
        final SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        final KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, ITERATION_COUNT, KEY_SIZE);
        final SecretKey tmp = factory.generateSecret(spec);

        return new SecretKeySpec(tmp.getEncoded(), "AES");
    }

    private static byte[] generateRandomBytes(int length) {
        final byte[] bytes = new byte[length];
        new SecureRandom().nextBytes(bytes);

        return bytes;
    }

    public static void main(String[] args) throws Exception {

        final String aesKey = "aes-michael";
        final String aad = "foo";

        final String originalData = "java-michael";
        System.out.println("Original data: " + originalData);

        final String ciphertext = encrypt(originalData, aesKey, aad);
        System.out.println("Ciphertext: " + ciphertext);

        final String plaintext = decrypt(ciphertext, aesKey, aad);
        System.out.println("Plaintext: " + plaintext);
    }
}
14:Ta88,const ITERATION_COUNT = 100000;

const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

async function generateKeyMaterial(password) {
	return crypto.subtle.importKey("raw", textEncoder.encode(password), { name: "PBKDF2" }, false, [
		"deriveBits",
		"deriveKey",
	]);
}

async function generateKey(keyMaterial, salt) {
	const iterationCount = ITERATION_COUNT;

	return crypto.subtle.deriveKey(
		{
			name: "PBKDF2",
			hash: "SHA-256",
			salt,
			iterations: iterationCount,
		},
		keyMaterial,
		{
			name: "AES-GCM",
			length: 256,
		},
		true,
		["encrypt", "decrypt"]
	);
}

async function encrypt(plaintext, password, aad) {
	const data = textEncoder.encode(plaintext);
	const salt = crypto.getRandomValues(new Uint8Array(16));
	const keyMaterial = await generateKeyMaterial(password);
	const key = await generateKey(keyMaterial, salt);
	const iv = crypto.getRandomValues(new Uint8Array(12));

	const encryptedData = await crypto.subtle.encrypt(
		{
			name: "AES-GCM",
			iv,
			...(aad && { additionalData: textEncoder.encode(aad) }),
		},
		key,
		data
	);

	const ciphertextBase64 = arrToBase64(encryptedData);
	const ivBase64 = btoa(String.fromCharCode.apply(null, iv));
	const saltBase64 = btoa(String.fromCharCode.apply(null, salt));

	return ciphertextBase64 + ":" + ivBase64 + ":" + saltBase64;
}

async function decrypt(encryptedData, password, aad) {
	const [ciphertextStr, ivStr, saltStr] = encryptedData.split(":");
	const ciphertext = Uint8Array.from(atob(ciphertextStr), (c) => c.charCodeAt(0));
	const iv = Uint8Array.from(atob(ivStr), (c) => c.charCodeAt(0));
	const salt = Uint8Array.from(atob(saltStr), (c) => c.charCodeAt(0));
	const keyMaterial = await generateKeyMaterial(password);
	const key = await generateKey(keyMaterial, salt);

	const decryptedData = await crypto.subtle.decrypt(
		{
			name: "AES-GCM",
			iv,
			...(aad && { additionalData: textEncoder.encode(aad) }),
		},
		key,
		ciphertext
	);

	return textDecoder.decode(decryptedData);
}

function arrToBase64(arr) {
	let binary = "";
	const bytes = new Uint8Array(arr);
	for (let i = 0; i < bytes.byteLength; i++) {
		binary += String.fromCharCode(bytes[i]);
	}

	return btoa(binary);
}

async function main() {
	const aesKey = "aes-michael";
	const aad = "foo";

	const originalData = "javascript-michael";
	console.log("Original data: " + originalData);

	const ciphertext = await encrypt(originalData, aesKey, aad);
	console.log("Ciphertext: " + ciphertext);

	const plaintext = await decrypt(ciphertext, aesKey, aad);
	console.log("Plaintext: " + plaintext);
}

main();
15:Td49,import java.util.Base64;

import com.google.crypto.tink.Aead;
import com.google.crypto.tink.InsecureSecretKeyAccess;
import com.google.crypto.tink.KeysetHandle;
import com.google.crypto.tink.TinkJsonProtoKeysetFormat;
import com.google.crypto.tink.aead.AeadConfig;
import com.google.crypto.tink.aead.AesGcmKeyManager;

public class Test {

    static {
        try {
            AeadConfig.register();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String createTinkKey() {
        try {
            KeysetHandle keysetHandle = KeysetHandle.generateNew(
                    AesGcmKeyManager.aes256GcmTemplate());
            final String key = TinkJsonProtoKeysetFormat.serializeKeyset(keysetHandle, InsecureSecretKeyAccess.get());
            final String keyBase64 = Base64.getEncoder().encodeToString(key.getBytes());

            return keyBase64;
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage(), e);
        }
    }

    public static String encrypt(String plaintext, String keyBase64) {
        return encrypt(plaintext, keyBase64, null);
    }

    public static String encrypt(String plaintext, String keyBase64, String aad) {

        final String key = new String(Base64.getDecoder().decode(keyBase64));
        final byte[] aadBytes = aad==null ? null : aad.getBytes();

        try {
            final KeysetHandle keysetHandle = TinkJsonProtoKeysetFormat.parseKeyset(key, InsecureSecretKeyAccess.get());
            final Aead aead = keysetHandle.getPrimitive(Aead.class);
            final byte[] cipheredData = aead.encrypt(plaintext.getBytes(), aadBytes);

            return Base64.getEncoder().encodeToString(cipheredData);
        } catch (Exception e) {
            throw new RuntimeException("Failed to encrypt.", e);
        }
    }

    public static String decrypt(String ciphertext, String keyBase64) {
        return decrypt(ciphertext, keyBase64, null);
    }

    public static String decrypt(String ciphertext, String keyBase64, String aad) {

        final String key = new String(Base64.getDecoder().decode(keyBase64));
        final byte[] ciphertextBytes = Base64.getDecoder().decode(ciphertext);
        final byte[] aadBytes = aad==null ? null : aad.getBytes();

        try {
            final KeysetHandle keysetHandle = TinkJsonProtoKeysetFormat.parseKeyset(key, InsecureSecretKeyAccess.get());
            final Aead aead = keysetHandle.getPrimitive(Aead.class);
            final byte[] decipheredData = aead.decrypt(ciphertextBytes, aadBytes);

            return new String(decipheredData);
        } catch (Exception e) {
            throw new RuntimeException("Failed to decrypt.", e);
        }
    }

    public static void main(String[] args) throws Exception {

        final String tinkKey = createTinkKey();
        final String aad = "foo";

        System.out.println("Tink key: " + tinkKey);

        final String originalData = "java-michael";
        System.out.println("Original data: " + originalData);

        final String ciphertext = encrypt(originalData, tinkKey, aad);
        System.out.println("Ciphertext: " + ciphertext);

        final String plaintext = decrypt(ciphertext, tinkKey, aad);
        System.out.println("Plaintext: " + plaintext);
    }
}
16:Te25,const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();

async function createTinkKey() {
	const aesCryptoKey = await generateCryptoKey();
	const tinkKey = await exportCryptoKeyAsTinkKey(aesCryptoKey);
	const tinkKeyId = Math.floor(Math.random() * new Uint32Array([-1])[0]);
	const tinkAesKey = btoa(String.fromCharCode.apply(null, tinkKey));
	const tinkKeyObj = {
		primaryKeyId: tinkKeyId,
		key: [
			{
				keyData: {
					typeUrl: "type.googleapis.com/google.crypto.tink.AesGcmKey",
					value: tinkAesKey,
					keyMaterialType: "SYMMETRIC",
				},
				status: "ENABLED",
				keyId: tinkKeyId,
				outputPrefixType: "TINK",
			},
		],
	};
	const tinkKeyJson = JSON.stringify(tinkKeyObj) + "\r\n";

	return btoa(tinkKeyJson);
}

async function generateCryptoKey() {
	return await crypto.subtle.generateKey(
		{
			name: "AES-GCM",
			length: 256,
		},
		true,
		["encrypt", "decrypt"]
	);
}

async function exportCryptoKeyAsTinkKey(cryptoKey) {
	const exportedKey = await crypto.subtle.exportKey("raw", cryptoKey);

	return new Uint8Array([26, 32, ...new Uint8Array(exportedKey)]);
}

async function convertToAesCryptoKey(tinkAesKey) {
	const tinkAesKeyArr = Uint8Array.from(atob(tinkAesKey), (m) => m.codePointAt(0)).subarray(2);

	return await crypto.subtle.importKey("raw", tinkAesKeyArr, "AES-GCM", true, ["encrypt", "decrypt"]);
}

async function encrypt(plaintext, tinkKeyJsonBase64, aad) {
	const tinkKeyJson = JSON.parse(atob(tinkKeyJsonBase64));
	const tinkAesKey = tinkKeyJson.key[0].keyData.value;
	const tinkKeyId = tinkKeyJson.key[0].keyId;
	const aesCryptoKey = await convertToAesCryptoKey(tinkAesKey);
	const iv = crypto.getRandomValues(new Uint8Array(12));

	const ciphertextArr = await crypto.subtle.encrypt(
		{
			name: "AES-GCM",
			iv,
			...(aad && { additionalData: textEncoder.encode(aad) }),
		},
		aesCryptoKey,
		textEncoder.encode(plaintext)
	);

	const tinkCiphertextArr = new Uint8Array([1, ...toBytes(tinkKeyId), ...iv, ...new Uint8Array(ciphertextArr)]);
	const tinkCiphertext = arrToBase64(tinkCiphertextArr);

	return tinkCiphertext;
}

async function decrypt(tinkCiphertext, tinkKeyJsonBase64, aad) {
	const tinkCiphertextArr = Uint8Array.from(atob(tinkCiphertext), (m) => m.codePointAt(0)).subarray(5);
	const tinkKeyJson = JSON.parse(atob(tinkKeyJsonBase64));
	const tinkAesKey = tinkKeyJson.key[0].keyData.value;
	const aesCryptoKey = await convertToAesCryptoKey(tinkAesKey);

	const plaintextArr = await crypto.subtle.decrypt(
		{
			name: "AES-GCM",
			iv: tinkCiphertextArr.subarray(0, 12),
			...(aad && { additionalData: textEncoder.encode(aad) }),
		},
		aesCryptoKey,
		tinkCiphertextArr.subarray(12)
	);

	const plaintext = textDecoder.decode(plaintextArr);

	return plaintext;
}

function arrToBase64(arr) {
	let binary = "";
	const bytes = new Uint8Array(arr);
	for (let i = 0; i < bytes.byteLength; i++) {
		binary += String.fromCharCode(bytes[i]);
	}

	return btoa(binary);
}

function toBytes(val) {
	return [(val >> 24) & 0xff, (val >> 16) & 0xff, (val >> 8) & 0xff, val & 0xff];
}

async function main() {
	const tinkKey = await createTinkKey();
	const aad = "foo";

	console.log("Tink key: " + tinkKey);

	const originalData = "javascript-michael";
	console.log("Original data: " + originalData);

	const ciphertext = await encrypt(originalData, tinkKey, aad);
	console.log("Ciphertext: " + ciphertext);

	const plaintext = await decrypt(ciphertext, tinkKey, aad);
	console.log("Plaintext: " + plaintext);
}

main();
17:Tf5a,Public Key: MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAjRpEi1pRZ81Pk1rkwK3AzPEjxm4MZLgK0yNPK/2R3HAJWWSGRzIQ4A7rWHB0L58UIPh4eWqhB0zdCVUeWdywauvXYFfBEPbqJqJjazL6UgwSunLzsf6O1LrRosJTdhIiEs5Q/W06I/dLVm3CrXTjdiRrmS2JlFnB8l9pFDugGElj6WzWsoMibC6kKpywazEtlbYpRtd36NgbeA5xjGgD5ZwqN1JOk2/vKBoQhRpnObVJkW+OSfYMEzMrYZ7tx9cmYvso29ygUQN0hGvB1Zbb89uNL5LN+p5gdEXp9ceg7AFePOx6JDvolrKyxAXQqC2F6iI6N50EkMDIXm52VrOD7t7rd7f6dVTm/tPssBng6ZSVLHWB1HgpdWYMwTfcRS9RVnWHtHTsxVrcjx0MDqLutg71Q+QtIrAaJpPmzc8NBOvfKqJTH5nv2diGTbQMfF8fDBxPLziBHLb7mDx/PYQtcybIokQz9lG1l7QC/jhiGeK9cZjM68YJfgUZ7oUpoTCS1INx8FfPSXsSCqLdS0vZNzt/z7YqMBXesA/j1D3lh7hAcX3zc0eCg/dVu6c2a23ttZOYAHLeal+ykSUHAviissxpiIYmIGrIsM56iwPjpxo0gnREcSW3B6b92Snk4cJH0lA7Sy4gEByDTfZ22jfegt98rsJ2J11qszbOzUDXeDkCAwEAAQ==

Private Key: MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQCNGkSLWlFnzU+TWuTArcDM8SPGbgxkuArTI08r/ZHccAlZZIZHMhDgDutYcHQvnxQg+Hh5aqEHTN0JVR5Z3LBq69dgV8EQ9uomomNrMvpSDBK6cvOx/o7UutGiwlN2EiISzlD9bToj90tWbcKtdON2JGuZLYmUWcHyX2kUO6AYSWPpbNaygyJsLqQqnLBrMS2VtilG13fo2Bt4DnGMaAPlnCo3Uk6Tb+8oGhCFGmc5tUmRb45J9gwTMythnu3H1yZi+yjb3KBRA3SEa8HVltvz240vks36nmB0Ren1x6DsAV487HokO+iWsrLEBdCoLYXqIjo3nQSQwMhebnZWs4Pu3ut3t/p1VOb+0+ywGeDplJUsdYHUeCl1ZgzBN9xFL1FWdYe0dOzFWtyPHQwOou62DvVD5C0isBomk+bNzw0E698qolMfme/Z2IZNtAx8Xx8MHE8vOIEctvuYPH89hC1zJsiiRDP2UbWXtAL+OGIZ4r1xmMzrxgl+BRnuhSmhMJLUg3HwV89JexIKot1LS9k3O3/PtiowFd6wD+PUPeWHuEBxffNzR4KD91W7pzZrbe21k5gAct5qX7KRJQcC+KKyzGmIhiYgasiwznqLA+OnGjSCdERxJbcHpv3ZKeThwkfSUDtLLiAQHINN9nbaN96C33yuwnYnXWqzNs7NQNd4OQIDAQABAoICAAUfGrVPKCzDGjwQPMTUma6mowSJCoieWIA85BsF52UvqNs2h5wucEfdqsOpQ0JWPRIMSr0ndmRQMSatUP50gO/EkyrzTHXr7GhOFRs3PLg9KXHcicVgZrlIdaL5eDONKXDyzaRBMm7LQ1AGCF6o4zeuzzv+V+PLVTuRpHwARQmUolx+35UXpuhz0fAdA1dEr/Gi7MEeQYMxUt/q8EqnHNsY7bxXz7PQyIa1WXunT29cCelOOgUrudj5jr3Kmbla8RD/Kka+rY/7Nt+2lJDG2sFxauC67KCH3prhzcHmxsvCKfQ+phlKFmFf55avWlk8W8O5jdDmcVu6r5sj2cZAWk3Du+tnBuq+3kLxpSjKwOwrBgQUjmbwkJdIbdnumrQAix77hWr0BJ3ears5f327Q4cU5i8ol+gmLC3V/+zx7kz9oHsMsYz8p6WLV8BHDTTHpwg2laizy2im4a1NpQd+iNONtV6Ua5kBcLUolAze/29Ojs+d+Dhy8wWjUKSc0U8JxdAtwXqwRegzVD2B3qDa6bCV3oIOOIc960yg66/+DwyoenA19iOOT2RCXowagzuTWizZQIL1oBrcp1CijWOWyJFJZmKwP7c914TGrIy2BDbhaCTss7aSecPHkWWcFX6i59MiViVDvUSJ1pH46ohE3Wyw3Hbc2O+UKxrQB1YT6WVdAoIBAQC/wJIpfpGPc694X07FOkcqwSRoyTUMDF/tbtrP+IblGaUEaijBQxmna9LcVfK1X8UimangwgX0xQZQFt29R0wmzGHgoJ9tCCHp0F2gKJzDDGGU1ALhaN48OW2u9yzh6PMZaqx+7QOAQHbemMAR5tnVF9jx2mEAgaJ8ZF2F/nzZaZhhZZWBvuqPe6tkd2ZUBVijrP99xb5V0yohL3gnBXMdFU5tyVRdk8LA8ffqJljmC2zibGfNzEEU9+RQ6scVMqJRY/GpFJ52Jls6sg4Rg5e6maSabtYlycDBaWiyE0jAnJM0DA3eKjQvEoRvMqYL/Jgea+T7PEnhJFNZuzWZFPZtAoIBAQC8YUG9DIBF8olZAxiJEMF3qho6yMQfx/kjXh+cQkaQQ75lC7zIgazhkkwkcCG2RJDTrzBa2i0pf+dlR9vaNtadePMxnF2NuLG39FE5vz9FkSkTxugPhAfimlO8jWdy9hAfxzwYgHPE7H6exo8TNicPOLhliD/naDVAoLIsuhpnX7ITnDijy5rP4bksyaIvivUbKcBLfF3maC2wCTM/hir87jQ2W9bQbrT4NNhsBBcYcZyP/BYdTUyypMwbN6KDExLTJMoaV1OsSSim/C9Kyu/2YJT0iT8uDzQU1S4mSSOoe8FP+SZZE+HIB/WSujcyIWgSwk84RnANU4hy3e6/JJl9AoIBABGsFcxtNc0axFk7r27N6DEwi8J8iL8LhOvFA7WXGheTPXoiro7hOEQN0+kqoqvEn86IiveD6jicz/Ahq13+bC5HN94T752E2ltKMNbJ52iyg2vL/lf36kNyp4Ewlppbdcwp4Kvx/Bid2Fa7jTgZJopVIFFp5va8+9SrC1OGGMuQx9JyIk1K4yNGKo2f03Z656huET3uM5SFWaSlU1WFUw6jIA9ONtBJBfHyWv7hed/5vZdAlnCJGpZsIkay3JY/jGYj5+nFVLVe45mNP26tyhYQgvMYs/PXnEQ3Cscer93QkGCDm+OV0Clmc34sFNGV/g8PspLVA5oUVvo2HsJ1BCECggEAetftV4u8ZmC4AkzLhi5gC1noyua7RoJQTCkH8g0iGNekZB5YWGR/yYVuk+Bvi32A+BnpLYXTJ5nZ2qkWjGFwaLZD2NlABLgpZG01PrQhXYtAvz3ZfKy7u6Cp9G49xLEDaMWywcOaOxOBqqaPDJcmt31kegl0qsHA4Ekqh5JAv6Ke7LzWDrIqXV+0Mqm2UsyJ89GxLUiHr0XGbWJCgi1LAS+Q6tXO6pMW/jjv3Nh5+x2zXA2mmisbVe+zjhgkqNcaUohOJwlFbjczBFm1uU9HVmI7IJATnESb0O4Hrz3IvAkf0bgGstYNSTUvhiRa9Bzm0jzWDjuYvIf5lfZ1xz3lvQKCAQAgFt2iBONo/1EiwfH6A8a3ruKqC+9xe69w0xrmvn3M3G9sXcl5WwIeEX6nqWPKI5zuZg67pvXEC+JS2AQD8wYh7bUjYHKEJs7awcv14IKnlkEH8/VJhQHHHi8mMJlVVQ0ldD3wmKjNfpqsdYXSKx9cPv8OCWJxwhSpo2KK7/5BZxONTjhPwa5MrrcibxqnmzUkE9sN4mAZ9+3NfEJW3B1Mt1pusUbXPs5fhApMEjA7MDg72jT+g9MOLUCgUoiZq/hCksZspHY/ToHtIYCizfvosQZohF1dVKZ+sUcZmXERNSlaewRT/p7sHEe9EKN89a1gL6mW7gHWwu5i/gy5yuoC
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","cross-language-rsa-aes"],"i":false,"f":[[["",{"children":["blog",{"children":["(2024-08)",{"children":["cross-language-rsa-aes",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2024-08)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2024-08)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["cross-language-rsa-aes",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2024-08)","children","cross-language-rsa-aes","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"1 簡介"}],"\n",["$","p",null,{"children":"RSA、AES 係現今最安全既加密法式。視乎情況，可能需要同時用曬佢地黎互補不足。"}],"\n",["$","h2",null,{"children":"1.1 RSA"}],"\n",["$","p",null,{"children":"RSA 係一種 asymmetric 既加密方式，利用一對唔一樣既 key pair 黎進行加密、解密："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"Key part"}],["$","th",null,{"children":"描述"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"Public key"}],["$","td",null,{"children":"係任何人（包括黑客）知道都冇問題既 key part。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"Private key"}],["$","td",null,{"children":"係除左個 key 既特定持有人（或者系統）之外，任何人都絕對唔可以知道既 key part。"}]]}]]}]]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"功能"}],["$","th",null,{"children":"操作"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"可以確保只有特定人物（或者系統）先至可以收到被加密既訊息。"}],["$","td",null,{"children":"用 public key 加密，然後用 private key 解密。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"接收到訊息既任何人物（或者系統）可以確保訊息係由特定人物（或者系統）發出。"}],["$","td",null,{"children":"用 private key 簽署，然後用 public key 驗證。"}]]}]]}]]}],"\n",["$","p",null,{"children":"註：就算技術上係可以用 private key 加密，然後用 public key 解密，但咁樣做都係冇用既，因為 public key 係 assume 所有人都知道既野黎。"}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"1.2 AES"}],"\n",["$","p",null,{"children":"AES 係一種 symmetric 既加密方式，利用單一 key 黎進行加密、解密。"}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"2 應用場景"}],"\n",["$","p",null,{"children":"以下既場景基本上都可以用 end-to-end TLS 解決，但 TLS 唔喺呢篇文章既討論範圍。"}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"場景"}],["$","th",null,{"children":"做法"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"我地想確保一個網頁既使用者輸入既資料只有 back-end server 先至可以睇到。"}],["$","td",null,{"children":"網頁用 RSA public key 加密資料，back-end server 用 RSA private key 解密資料。"}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"我地想確保一個網頁既使用者喺讀取敏感或者機密既資料既時候，只有佢先可以睇到。"}],["$","td",null,{"children":"網頁生成隨機 AES key，用 RSA public key 加密 AES key，back-end server 用 RSA private kye 解密 AES key，再用 AES key 加密資料，網頁用 AES key 解密資料。"}]]}]]}]]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"3 規格"}],"\n",["$","p",null,{"children":"呢篇文章會示範以下比較常見既 industry standard 規格："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"style":{"textAlign":"center"},"children":"加密方式"}],["$","th",null,{"style":{"textAlign":"center"},"children":"Algorithm"}],["$","th",null,{"style":{"textAlign":"center"},"children":"Key size"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"style":{"textAlign":"center"},"children":"RSA"}],["$","td",null,{"style":{"textAlign":"center"},"children":"RSA-OAEP-256"}],["$","td",null,{"style":{"textAlign":"center"},"children":"RSA 4096-bit"}]]}],["$","tr",null,{"children":[["$","td",null,{"style":{"textAlign":"center"},"children":"AES"}],["$","td",null,{"style":{"textAlign":"center"},"children":"AES-GCM"}],["$","td",null,{"style":{"textAlign":"center"},"children":"AES 256-bit"}]]}]]}]]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"4 動手寫"}],"\n",["$","p",null,{"children":"下面既實現方式都可以達到跨程式語言既 interoperability："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"由 Java 或者 JavaScript 加密得到既 RSA ciphertext 可以用 Java 或者 JavaScript 解密。"}],"\n",["$","li",null,{"children":"由 Java 或者 JavaScript 加密得到既 AES ciphertext 可以用 Java 或者 JavaScript 解密。"}],"\n",["$","li",null,{"children":"由 Google Tink Java SDK 加密得到既 AES ciphertext 可以用 JavaScript 解密。"}],"\n"]}],"\n",["$","p",null,{"children":"我地可以用以下既 APIs 黎實現："}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"style":{"textAlign":"center"},"children":"程式語言／環境"}],["$","th",null,{"style":{"textAlign":"center"},"children":"API"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"style":{"textAlign":"center"},"children":"Java"}],["$","td",null,{"style":{"textAlign":"center"},"children":"Java Cryptography Extension（JCE）"}]]}],["$","tr",null,{"children":[["$","td",null,{"style":{"textAlign":"center"},"children":"NodeJS、網頁瀏覽器 JavaScript"}],["$","td",null,{"style":{"textAlign":"center"},"children":"Web Crypto API，或者叫 SubtleCrypto"}]]}]]}]]}],"\n",["$","h2",null,{"children":"4.1 RSA 加密、解密"}],"\n",["$","h3",null,{"children":"4.1.1 Java Cryptography Extension"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"$f"}]}],"\n",["$","p",null,{"children":"用 Java Cryptography Extension 生成 RSA key pair，再進行 RSA 加密、解密既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$10"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"4.1.2 JavaScript SubtleCrypto"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"$11"}]}],"\n",["$","p",null,{"children":"用 JavaScript SubtleCrypto 生成 RSA key pair，再進行 RSA 加密、解密既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$12"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.2 AES 加密、解密"}],"\n",["$","h3",null,{"children":"4.2.1 Java Cryptography Extension"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"$13"}]}],"\n",["$","p",null,{"children":"用 Java Cryptography Extension 進行 AES 加密、解密既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"Original data: java-michael\r\nCiphertext: 5RGtl7OunRKK0vPQfJqX6JNG+PYtJeJ1O8+dwQ==:UDvhwMUax8sEUNi3:2ZCHaDTEUMJLjcwrBraIBg==\r\nPlaintext: java-michael\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"4.2.2 JavaScript SubtleCrypto"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"$14"}]}],"\n",["$","p",null,{"children":"用 JavaScript SubtleCrypto 進行 AES 加密、解密既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"Original data: javascript-michael\r\nCiphertext: Cq02/TR1s6zM1cHpa93Piqh68DpgkLlBk8AhxtjOXGtKkQ==:tbOGPjDOhEKdhnL8:SG3youQ7Q5cgqxjUngULZg==\r\nPlaintext: javascript-michael\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"4.2.3 Java Google Tink"}],"\n",["$","p",null,{"children":"註：Google Tink 既 AES-GCM 都係基於 Java Cryptography Extension。"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"$15"}]}],"\n",["$","p",null,{"children":"用 Java Google Tink 生成 Tink AES key，再進行 AES 加密、解密既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"Tink key: eyJwcmltYXJ5S2V5SWQiOjE1Njk2MzM4NjgsImtleSI6W3sia2V5RGF0YSI6eyJ0eXBlVXJsIjoidHlwZS5nb29nbGVhcGlzLmNvbS9nb29nbGUuY3J5cHRvLnRpbmsuQWVzR2NtS2V5IiwidmFsdWUiOiJHaUJSTndVNEVwY0xEZFNGYkVVeU5tU1BxS1ZmUTZwNmdNWjVDQzZWd3BXNkFRPT0iLCJrZXlNYXRlcmlhbFR5cGUiOiJTWU1NRVRSSUMifSwic3RhdHVzIjoiRU5BQkxFRCIsImtleUlkIjoxNTY5NjMzODY4LCJvdXRwdXRQcmVmaXhUeXBlIjoiVElOSyJ9XX0NCg==\r\nOriginal data: java-michael\r\nCiphertext: AV2OtkyRZLtLOw0VnZSBIfKkjZyHzlSkiqUCtPUKGlnfoSuX5CesH27dVRl7\r\nPlaintext: java-michael\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"4.2.4 JavaScript SubtleCrypto 仿 Google Tink"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"$16"}]}],"\n",["$","p",null,{"children":"用 JavaScript SubtleCrypto 仿 Google Tink 生成 Tink AES key，再進行 AES 加密、解密既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"Tink key: eyJwcmltYXJ5S2V5SWQiOjk3MzczMjg5Mywia2V5IjpbeyJrZXlEYXRhIjp7InR5cGVVcmwiOiJ0eXBlLmdvb2dsZWFwaXMuY29tL2dvb2dsZS5jcnlwdG8udGluay5BZXNHY21LZXkiLCJ2YWx1ZSI6IkdpQTVIbFk4THQ3VGw2VElxd0JEZGIvaHlOS0NFWUFiVHhidnJuUWhyS2RRWHc9PSIsImtleU1hdGVyaWFsVHlwZSI6IlNZTU1FVFJJQyJ9LCJzdGF0dXMiOiJFTkFCTEVEIiwia2V5SWQiOjk3MzczMjg5Mywib3V0cHV0UHJlZml4VHlwZSI6IlRJTksifV19DQo=\r\nOriginal data: javascript-michael\r\nCiphertext: AToJ/B1XUK0uYmml3WWNEFfSK4Fd6qMM8gEsGUFTMULrZsZ83N9zk5oXRG3M7xf1oVXn\r\nPlaintext: javascript-michael\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"5 附錄"}],"\n",["$","h2",null,{"children":"5.1 NodeJS Crypto module 生成 RSA key pair"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-js","children":"const crypto = require(\"crypto\");\r\n\r\nfunction createRsaKeyPair() {\r\n\tconst { publicKey, privateKey } = crypto.generateKeyPairSync(\"rsa\", {\r\n\t\tmodulusLength: 4096,\r\n\t\tpublicKeyEncoding: {\r\n\t\t\ttype: \"spki\",\r\n\t\t\tformat: \"der\",\r\n\t\t},\r\n\t\tprivateKeyEncoding: {\r\n\t\t\ttype: \"pkcs8\",\r\n\t\t\tformat: \"der\",\r\n\t\t},\r\n\t});\r\n\r\n\tconst publicKeyBase64 = publicKey.toString(\"base64\");\r\n\tconst privateKeyBase64 = privateKey.toString(\"base64\");\r\n\r\n\treturn {\r\n\t\tpublicKey: publicKeyBase64,\r\n\t\tprivateKey: privateKeyBase64,\r\n\t};\r\n}\r\n\r\nasync function main() {\r\n\tconst { publicKey, privateKey } = createRsaKeyPair();\r\n\r\n\tconsole.log(\"Public Key: \" + publicKey);\r\n\tconsole.log();\r\n\tconsole.log(\"Private Key: \" + privateKey);\r\n}\r\n\r\nmain();\n"}]}],"\n",["$","p",null,{"children":"用 NodeJS Crypto module 生成 RSA key pair 既結果："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$17"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"6 參考資料"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://sudhiryelikar.com/articles/111-rsa-encryption-in-javascript-and-decryption-in-java","children":"RSA encryption in JavaScript and decryption in Java"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://dev.to/ihssmaheel/shielding-your-data-aes-gcm-encryption-decryption-for-javascript-typescript-java-and-python-1cpm","children":"Secure Your Data: AES-GCM Encryption & Decryption for JavaScript, TypeScript, Java, and Python"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://developers.google.com/tink/encrypt-data#java","children":"Google Tink 官方文檔 - I want to encrypt data"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://developers.google.com/tink/aead","children":"Google Tink 官方文檔 - Authenticated Encryption with Associated Data (AEAD)"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://developers.google.com/tink/supported-key-types","children":"Google Tink 官方文檔 - Key types supported by language"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://developers.google.com/tink/wire-format","children":"Google Tink 官方文檔 - Tink wire format"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://stackoverflow.com/questions/67320913/how-to-pass-in-valid-values-into-cleartext-keyset-json-to-create-a-tink-key","children":"StackOverflow - How to pass in valid values into cleartext_keyset_json to create a Tink key"}]}],"\n"]}]],null,["$","$L18",null,{"children":"$L19"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","H_BrCZL2doeyzLtaqAzUj",{"children":[["$","$L1a",null,{"children":"$L1b"}],["$","$L1c",null,{"children":"$L1d"}],null]}]]}],false]],"m":"$undefined","G":["$1e","$undefined"],"s":false,"S":true}
1d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
1b:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
19:null
