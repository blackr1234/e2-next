1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
10:I[6213,[],"OutletBoundary"]
12:I[6213,[],"MetadataBoundary"]
14:I[6213,[],"ViewportBoundary"]
16:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
f:T6b9,import org.springframework.transaction.annotation.Transactional;

@Component
@Transactional
public class PersonDao {

    @Autowired EntityManagerFactory emf;

    SessionFactory sessionFactory;

    @PostConstruct
    public void init() {
        sessionFactory = emf.unwrap(SessionFactory.class);
    }

    @SuppressWarnings("unchecked")
    public PersonEntity getByFirstName(String firstName) {

        final List<PersonEntity> persons = sessionFactory
                .getCurrentSession()
                .createSQLQuery("SELECT id, first_name firstName, status FROM person WHERE first_name = :firstName")
                .addScalar("id", StandardBasicTypes.LONG)
                .addScalar("firstName", StandardBasicTypes.STRING)
                .addScalar("status", StandardBasicTypes.STRING)
                .setResultTransformer(Transformers.aliasToBean(PersonEntity.class))
                .setParameter("firstName", firstName)
                .list();

        return persons.isEmpty() ? null : persons.get(0);
    }

    @SuppressWarnings("unchecked")
    public List<PersonEntity> getAllByStatus(List<String> statuses) {
        return sessionFactory
                .getCurrentSession()
                .createSQLQuery("SELECT id, first_name firstName, status FROM person WHERE status IN :statuses")
                .addScalar("id", StandardBasicTypes.LONG)
                .addScalar("firstName", StandardBasicTypes.STRING)
                .addScalar("status", StandardBasicTypes.STRING)
                .setResultTransformer(Transformers.aliasToBean(PersonEntity.class))
                .setParameterList("statuses", statuses)
                .list();
    }
}
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","jpa-usage"],"i":false,"f":[[["",{"children":["blog",{"children":["(2021-09)",{"children":["jpa-usage",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2021-09)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2021-09)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["jpa-usage",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2021-09)","children","jpa-usage","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"1 JPA／Hibernate 簡介"}],"\n",["$","p",null,{"children":"Back-end application 一般都需要連接 database 去查詢資料、更新資料，而如果選擇用 Java、TypeScript 呢啲屬於 strongly typed 既程序語言，為左方便 coding，都會寫啲 class 作為載體咁喺 memory 度緩存啲 table 紀錄數據，操作可以只係純查詢，但亦可以包括更新某個 column 既 value。簡單講，就係根據 class、fields 可以得到 SELECT SQL、UPDATE SQL，而 query result 可以用 typed objects 緩存等等。"}],"\n",["$","p",null,{"children":"而將 table 紀錄轉化成 typed objects 就需要一個過程，呢個過程就要用到 ORM（object-relational mapping），將程式既 class（人稱 entity／DO／DTO／VO／POJO）以及裡面既 instance fields 同 database table 以及佢既 columns 兩者做 mapping。"}],"\n",["$","p",null,{"children":"喺 Java 既世界裡面，最熱門既 ORM libraries 就係 JPA、Hibernate。佢地兩個並唔係二選一既關係——JPA 係一個 ORM 既標準，而 Hibernate 就係實現左 JPA 標準既一個 framework。事實上，Hibernate 係比 JPA 更早出現。"}],"\n",["$","p",null,{"children":"一般既 Spring projects 都會引入 JPA、Hibernate 既 libraries 去做 ORM，而國內或者中資公司可能會用 MyBatis，即係 prefer 寫 native SQL，但就唔算係一個 ORM framework。"}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"2 動手寫"}],"\n",["$","p",null,{"children":"Project setup："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Spring Boot（web）"}],"\n",["$","li",null,{"children":"JPA／Hibernate"}],"\n",["$","li",null,{"children":"MySQL 或 MariaDB"}],"\n"]}],"\n",["$","h2",null,{"children":"2.1 Maven dependencies"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-xml","children":"<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.6.1</version>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.projectlombok</groupId>\r\n        <artifactId>lombok</artifactId>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>mysql</groupId>\r\n        <artifactId>mysql-connector-java</artifactId>\r\n        <version>8.0.26</version>\r\n    </dependency>\r\n</dependencies>\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.2 Application 配置"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"application.yml"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"spring:\r\n    jpa:\r\n        show-sql: true\r\n        open-in-view: false\r\n        hibernate:\r\n            ddl-auto: update\r\n        properties:\r\n            hibernate:\r\n                dialect: org.hibernate.dialect.MySQL57InnoDBDialect\r\n    datasource:\r\n        url: jdbc:mysql://localhost:3306/mydb?useSSL=false\r\n        username: root\r\n        password:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.3 寫 Java code"}],"\n",["$","h3",null,{"children":"2.3.1 Entity"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Data\r\n@Accessors(chain = true)\r\n@FieldDefaults(level = PRIVATE)\r\n@Entity\r\n@Table(name = \"person\")\r\npublic class PersonEntity {\r\n    @Id\r\n    @GeneratedValue(strategy = IDENTITY)\r\n    Long id;\r\n\r\n    String firstName;\r\n    String status;\r\n}\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"@Data"}],"、",["$","code",null,{"children":"@Accessors"}]," 以及 ",["$","code",null,{"children":"@FieldDefaults"}]," 都係 Lombok annotations，用黎 generate methods、keyword 既 code，咁我地就冇需要寫 getters 同 setters。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"@Entity"}]," 係用黎話畀 Hibernate 知呢個係一個 entity class。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"@Table"}]," 係用黎話畀 Hibernate 知應該 map 去邊個 database table。"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"2.3.2 Repository interface：用 method 名砌 SQL"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"PersonRepo.java"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Repository\r\npublic interface PersonRepo extends JpaRepository<PersonEntity, Long> {\r\n\r\n    Optional<PersonEntity> findOneByFirstName(String firstName);\r\n\r\n    List<PersonEntity> findAllByStatusIn(List<String> statuses);\r\n}\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"@Repository"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["因為個 interface 已經 extends 左 Spring Boot JPA 既 ",["$","code",null,{"children":"JpaRepository"}],"，所以其實呢個 annotation 唔係必要。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"findOneByFirstName"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Return ",["$","code",null,{"children":"Optional<PersonEntity>"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["因為 ",["$","code",null,{"children":"findOne"}],"，所以只會查詢到 ",["$","code",null,{"children":"1"}]," 個紀錄。"]}],"\n",["$","li",null,{"children":["Return type 可以選擇性地用 ",["$","code",null,{"children":"Optional"}]," wrapper 包住，擁抱 Java 8 既新功能。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"findOne"}]," 砌出黎果句 SQL 會做到 ",["$","code",null,{"children":"SELECT"}]," 以及 ",["$","code",null,{"children":"LIMIT 1"}]," 既效果。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"ByFirstName"}]," 砌出黎果句 SQL 會做到 ",["$","code",null,{"children":"WHERE first_name = ?"}]," 既效果。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"findAllByStatusIn"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Return ",["$","code",null,{"children":"List<PersonEntity>"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["因為 ",["$","code",null,{"children":"findAll"}],"，所以會查詢到多個紀錄。"]}],"\n",["$","li",null,{"children":["因為已經用左 ",["$","code",null,{"children":"List"}]," 做 wrapper，所以唔需要再用 ",["$","code",null,{"children":"Optional"}]," 包多層。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"findAll"}]," 砌出黎果句 SQL 會做到 ",["$","code",null,{"children":"SELECT"}]," 既效果。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"ByStatusIn"}]," 砌出黎果句 SQL 會做到 ",["$","code",null,{"children":"WHERE status IN (?)"}]," 既效果。"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"2.3.3 Repository interface：用 JPQL／HQL"}],"\n",["$","p",null,{"children":"JPQL（Java Persistence query language）／HQL（Hibernate query language）既基本 syntax 同 native SQL 差唔多。因為係有 ORM 既元素喺裡面，所以會用 class 名、field 名黎代替 table 名、column 名。"}],"\n",["$","p",null,{"children":"最簡單既 syntax 係咁："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@Repository\r\npublic interface PersonRepo extends JpaRepository<PersonEntity, Long> {\r\n\r\n    @Query(\"SELECT p FROM PersonEntity p WHERE p.firstName = :firstName\")\r\n    Optional<PersonEntity> getByFirstName(@Param(\"firstName\") String firstName);\r\n\r\n    @Query(\"SELECT p FROM PersonEntity p WHERE p.status IN :statuses\")\r\n    List<PersonEntity> getAllByStatusIn(@Param(\"statuses\") List<String> statuses);\r\n}\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"getByFirstName"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":":firstName"}]," 會成為 prepared statement 既 parameter（i.e. ",["$","code",null,{"children":"= ?"}],"）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"@Param(\"firstName\")"}]," 既 variable value 會對應返 ",["$","code",null,{"children":":firstName"}]]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"getAllByStatusIn"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":":statuses"}]," 會成為 prepared statement 既 parameter（i.e. ",["$","code",null,{"children":"IN (?)"}],"）"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"@Param(\"statuses\")"}]," 既 variable values 會對應返 ",["$","code",null,{"children":":statuses"}]]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"2.3.4 Repository interface：用 native SQL"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"import org.springframework.transaction.annotation.Transactional;\r\n\r\n@Repository\r\npublic interface PersonRepo extends JpaRepository<PersonEntity, Long> {\r\n\r\n    @Query(nativeQuery = true, value = \"SELECT * FROM person WHERE first_name = :firstName\")\r\n    Optional<PersonEntity> getByFirstName(@Param(\"firstName\") String firstName);\r\n\r\n    @Query(nativeQuery = true, value = \"SELECT * FROM person WHERE status IN :statuses\")\r\n    List<PersonEntity> getAllByStatusIn(@Param(\"statuses\") List<String> statuses);\r\n\r\n    @Transactional\r\n    @Modifying\r\n    @Query(nativeQuery = true, value = \"UPDATE person SET status = ?2 WHERE id = ?1\")\r\n    void updateStatus(Long id, String status);\r\n}\n"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"updateStatus"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["如果句 SQL 會修改數據，就需要加上 ",["$","code",null,{"children":"@Modifying"}]," 以及 ",["$","code",null,{"children":"@Transactional"}],"，否則會導致 exception","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["冇 ",["$","code",null,{"children":"@Modifying"}],"：",["$","code",null,{"children":"Caused by: java.sql.SQLException: Can not issue data manipulation statements with executeQuery()"}]]}],"\n",["$","li",null,{"children":["冇 ",["$","code",null,{"children":"@Transactional"}],"：",["$","code",null,{"children":"org.springframework.dao.InvalidDataAccessApiUsageException: Executing an update/delete query; nested exception is javax.persistence.TransactionRequiredException: Executing an update/delete query"}],"。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"?1"}],"、",["$","code",null,{"children":"?2"}]," 會成為 prepared statements 既 parameters（i.e. ",["$","code",null,{"children":"= ?"}],"）"]}],"\n",["$","li",null,{"children":["Method parameters 既次序會對應返 ",["$","code",null,{"children":"?1"}],"、",["$","code",null,{"children":"?2"}],"（index 係 ",["$","code",null,{"children":"1"}],"-based）"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":"2.3.5 DAO class：用 native SQL（Spring Boot 1.5 + Hibernate 5.0）"}],"\n",["$","h4",null,{"children":"2.3.5.1 將結果轉化成 POJO class"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"$f"}]}],"\n",["$","p",null,{"children":"解釋："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"SessionFactory"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["呢個例子將 ",["$","code",null,{"children":"EntityManagerFactory"}]," unwrap 成 ",["$","code",null,{"children":"SessionFactory"}],"，然後 create session，得到 ",["$","code",null,{"children":"Session"}]," object 再 create native SQL 既 ",["$","code",null,{"children":"SQLQuery"}]," object。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"setResultTransformer(Transformers.aliasToBean(PersonEntity.class))"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["我地需要用 ",["$","code",null,{"children":"AliasToBeanResultTransformer"}]," 既 ",["$","code",null,{"children":"ResultTransformer"}]," 黎話畀 Hibernate 知我地想將 query result 轉化成某個特定 class 既 objects。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["否則，得到既結果就會係一個 ",["$","code",null,{"children":"List<Object[]>"}]," 既 object。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"addScalar(\"firstName\", StandardBasicTypes.STRING)"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"我地需要自己 map query result 既 column，仲要話畀 Hibernate 知 data type。"}],"\n",["$","li",null,{"children":["如果 column 有 ",["$","code",null,{"children":"_"}],"，需要畀一個冇 ",["$","code",null,{"children":"_"}]," 既 alias（",["$","code",null,{"children":"first_name firstName"}]," 或者 ",["$","code",null,{"children":"first_name AS firstName"}],"）。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"addScalar"}]," 既第 ",["$","code",null,{"children":"1"}]," 個 argument 係用 SQL 裡面個 column 既 alias。"]}],"\n",["$","li",null,{"children":["如果 column 有 ",["$","code",null,{"children":"_"}]," 但係句 SQL 裡面冇畀 column alias 或者冇 call 岩 ",["$","code",null,{"children":"addScalar"}],"，咁就會令最後轉化出黎既 ",["$","code",null,{"children":"PersonEntity"}]," object 對應既 field value ",["$","code",null,{"children":"null"}]," 左。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"setParameter"}],"、",["$","code",null,{"children":"setParameterList"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"呢啲 methods 係用黎將 values 對應返 prepared statement 既 parameters。"}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h4",null,{"children":["2.3.5.2 將結果轉化成 Java ",["$","code",null,{"children":"Map"}]]}],"\n",["$","p",null,{"children":["如果我地需要 dynamic 既 query result，即係 column 名係喺 compile time 既時候唔知既，咁我地可以用 ",["$","code",null,{"children":"AliasToEntityMapResultTransformer.INSTANCE"}]," 既 ",["$","code",null,{"children":"ResultTransformer"}],"。"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"final List<Map<String, Object>> records = sessionFactory.getCurrentSession()\r\n\t\t\t\t\t\t\t\t\t\t\t.createSQLQuery(\"SELECT * FROM person\")\r\n\t\t\t\t\t\t\t\t\t\t\t.setResultTransformer(AliasToEntityMapResultTransformer.INSTANCE)\r\n\t\t\t\t\t\t\t\t\t\t\t.list();\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"3 參考資料"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://stackoverflow.com/questions/66071165/how-to-pass-parameters-in-a-native-query-jpa/66071251","children":"StackOverflow - How to pass parameters in a native query JPA"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://stackoverflow.com/questions/8136225/resulttransformer-with-createsqlquery-forces-no-camelcase-in-entity-fields","children":"StackOverflow - ResultTransformer with createSQLQuery forces no camelCase in entity fields"}]}],"\n"]}]],null,["$","$L10",null,{"children":"$L11"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","pH9ffONZtskuIeQ5g1ynn",{"children":[["$","$L12",null,{"children":"$L13"}],["$","$L14",null,{"children":"$L15"}],null]}]]}],false]],"m":"$undefined","G":["$16","$undefined"],"s":false,"S":true}
15:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
13:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
11:null
