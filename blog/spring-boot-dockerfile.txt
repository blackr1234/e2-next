1:"$Sreact.fragment"
2:I[8287,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
3:I[3339,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
4:I[1367,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
5:I[5244,[],""]
6:I[3866,[],""]
7:I[4798,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
8:I[6121,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
9:I[3667,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],"default"]
a:I[8407,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
b:I[8173,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","8974","static/chunks/app/page-c8b940db14fac9a0.js"],""]
c:I[3197,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
d:I[7933,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
e:I[3800,["7829","static/chunks/7829-b7b9eb1dbe0d40e4.js","2153","static/chunks/2153-45fd9844831c6348.js","7177","static/chunks/app/layout-ea91c2d128ec48c2.js"],"default"]
14:I[6213,[],"OutletBoundary"]
16:I[6213,[],"MetadataBoundary"]
18:I[6213,[],"ViewportBoundary"]
1a:I[4835,[],""]
:HL["/e2-next/_next/static/css/d3df112486f97f47.css","style"]
:HL["/e2-next/_next/static/css/c3624a693ae5a0c4.css","style"]
f:T636,FROM mcr.microsoft.com/openjdk/jdk:17-ubuntu AS jre-stage

RUN jlink \
 --add-modules \
java.base,\
java.compiler,\
java.datatransfer,\
java.desktop,\
java.instrument,\
java.logging,\
java.management,\
java.management.rmi,\
java.naming,\
java.net.http,\
java.prefs,\
java.rmi,\
java.scripting,\
java.se,\
java.security.jgss,\
java.security.sasl,\
java.smartcardio,\
java.sql,\
java.sql.rowset,\
java.transaction.xa,\
java.xml,\
java.xml.crypto,\
jdk.accessibility,\
jdk.charsets,\
jdk.crypto.cryptoki,\
jdk.crypto.ec,\
jdk.dynalink,\
jdk.httpserver,\
jdk.internal.ed,\
jdk.internal.le,\
jdk.internal.vm.ci,\
jdk.internal.vm.compiler,\
jdk.internal.vm.compiler.management,\
jdk.jdwp.agent,\
jdk.jfr,\
jdk.jsobject,\
jdk.localedata,\
jdk.management,\
jdk.management.agent,\
jdk.management.jfr,\
jdk.naming.dns,\
jdk.naming.rmi,\
jdk.net,\
jdk.nio.mapmode,\
jdk.random,\
jdk.sctp,\
jdk.security.auth,\
jdk.security.jgss,\
jdk.unsupported,\
jdk.xml.dom,\
jdk.zipfs \
 --strip-debug \
 --no-man-pages \
 --no-header-files \
 --compress=2 \
 --output /javaruntime



FROM ubuntu:22.04

# VOLUME /tmp
EXPOSE 8080

RUN mkdir -m 445 /app && mkdir -m 445 /app/jre
WORKDIR /app

RUN addgroup --system mygroup && adduser --system --shell /bin/false --ingroup mygroup myuser
USER myuser

ENV PATH "/app/jre/bin:$PATH"
COPY --from=jre-stage  --chown=root:root --chmod=445 /javaruntime /app/jre

# CMD "java" "-jar" "app.jar"
ENTRYPOINT ["java", "-jar", "app.jar"]

COPY --chown=root:root --chmod=444 /target/app.jar app.jar
10:T709,FROM maven:3.9.6-eclipse-temurin-17 AS mvn-stage
RUN mkdir /project
COPY . /project
WORKDIR /project
RUN mvn clean package && mv /project/target/*.jar /project/target/app.jar



FROM mcr.microsoft.com/openjdk/jdk:17-ubuntu AS jre-stage

RUN jlink \
 --add-modules \
java.base,\
java.compiler,\
java.datatransfer,\
java.desktop,\
java.instrument,\
java.logging,\
java.management,\
java.management.rmi,\
java.naming,\
java.net.http,\
java.prefs,\
java.rmi,\
java.scripting,\
java.se,\
java.security.jgss,\
java.security.sasl,\
java.smartcardio,\
java.sql,\
java.sql.rowset,\
java.transaction.xa,\
java.xml,\
java.xml.crypto,\
jdk.accessibility,\
jdk.charsets,\
jdk.crypto.cryptoki,\
jdk.crypto.ec,\
jdk.dynalink,\
jdk.httpserver,\
jdk.internal.ed,\
jdk.internal.le,\
jdk.internal.vm.ci,\
jdk.internal.vm.compiler,\
jdk.internal.vm.compiler.management,\
jdk.jdwp.agent,\
jdk.jfr,\
jdk.jsobject,\
jdk.localedata,\
jdk.management,\
jdk.management.agent,\
jdk.management.jfr,\
jdk.naming.dns,\
jdk.naming.rmi,\
jdk.net,\
jdk.nio.mapmode,\
jdk.random,\
jdk.sctp,\
jdk.security.auth,\
jdk.security.jgss,\
jdk.unsupported,\
jdk.xml.dom,\
jdk.zipfs \
 --strip-debug \
 --no-man-pages \
 --no-header-files \
 --compress=2 \
 --output /javaruntime



FROM ubuntu:22.04

# VOLUME /tmp
EXPOSE 8080

RUN mkdir -m 445 /app && mkdir -m 445 /app/jre
WORKDIR /app

RUN addgroup --system mygroup && adduser --system --shell /bin/false --ingroup mygroup myuser
USER myuser

ENV PATH "/app/jre/bin:$PATH"
COPY --from=jre-stage  --chown=root:root --chmod=445 /javaruntime /app/jre

# CMD "java" "-jar" "app.jar"
ENTRYPOINT ["java", "-jar", "app.jar"]

COPY --from=mvn-stage --chown=root:root --chmod=444 /project/target/app.jar app.jar
11:T698,apiVersion: v1
kind: Pod
metadata:
    name: spring-boot-3-docker-test
spec:
    terminationGracePeriodSeconds: 60 # 唔可以少過 Spring Boot 既 graceful shutdown 時限配置
    containers:
        - name: spring-boot-3-docker-test
          image: spring-boot-3-docker-test:latest
          imagePullPolicy: Never # 只限本地測試用
          securityContext:
              readOnlyRootFilesystem: true # 安全需要
          ports:
              - containerPort: 8080
          startupProbe:
              httpGet:
                  path: /actuator/health/liveness
                  port: 8080
              initialDelaySeconds: 5
              periodSeconds: 5
              failureThreshold: 30
          livenessProbe:
              httpGet:
                  path: /actuator/health/liveness
                  port: 8080
              initialDelaySeconds: 5
              periodSeconds: 10
              failureThreshold: 3
          readinessProbe:
              httpGet:
                  path: /actuator/health/readiness
                  port: 8080
              initialDelaySeconds: 5
              periodSeconds: 10
              failureThreshold: 3
          args: # 示範用 command line arguments 黎改變 Spring Boot behaviors
              - --logging.level.root=DEBUG
          resources:
              limits:
                  cpu: 1000m
              requests:
                  cpu: 100m

          # 用 emptyDir 方法，令 /tmp 可以寫入
          volumeMounts:
              - name: empty-tmp-dir
                mountPath: /tmp
    volumes:
        - name: empty-tmp-dir
          emptyDir: {}
12:T902,apiVersion: apps/v1
kind: Deployment
metadata:
    name: spring-boot-3-docker-test-deployment
spec:
    replicas: 2 # 呢個會係固定數量
    selector:
        matchLabels:
            app: spring-boot-3-docker-test
    template:
        metadata:
            labels:
                app: spring-boot-3-docker-test
        spec:
            terminationGracePeriodSeconds: 60 # 唔可以少過 Spring Boot 既 graceful shutdown 時限配置
            containers:
                - name: spring-boot-3-docker-test
                  image: spring-boot-3-docker-test:latest
                  imagePullPolicy: Never # 只限本地測試用
                  securityContext:
                      readOnlyRootFilesystem: true # 安全需要
                  ports:
                      - containerPort: 8080
                  startupProbe:
                      httpGet:
                          path: /actuator/health/liveness
                          port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      failureThreshold: 30
                  livenessProbe:
                      httpGet:
                          path: /actuator/health/liveness
                          port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      failureThreshold: 3
                  readinessProbe:
                      httpGet:
                          path: /actuator/health/readiness
                          port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      failureThreshold: 3
                  args: # 示範用 command line arguments 黎改變 Spring Boot behaviors
                      - --logging.level.root=DEBUG
                  resources:
                      limits:
                          cpu: 1000m
                      requests:
                          cpu: 100m

                  # 用 emptyDir 方法，令 /tmp 可以寫入
                  volumeMounts:
                      - name: empty-tmp-dir
                        mountPath: /tmp
            volumes:
                - name: empty-tmp-dir
                  emptyDir: {}
13:T69d,Caused by: org.springframework.boot.web.server.WebServerException: Unable to create tempDir. java.io.tmpdir is set to /tmp
        at org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir(AbstractConfigurableWebServerFactory.java:241)
        at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:202)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:188)
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:162)
        ... 15 common frames omitted
Caused by: java.nio.file.FileSystemException: /tmp/tomcat.8080.9381430298818445978: Read-only file system
        at java.base/sun.nio.fs.UnixException.translateToIOException(Unknown Source)
        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(Unknown Source)
        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(Unknown Source)
        at java.base/sun.nio.fs.UnixFileSystemProvider.createDirectory(Unknown Source)
        at java.base/java.nio.file.Files.createDirectory(Unknown Source)
        at java.base/java.nio.file.TempFileHelper.create(Unknown Source)
        at java.base/java.nio.file.TempFileHelper.createTempDirectory(Unknown Source)
        at java.base/java.nio.file.Files.createTempDirectory(Unknown Source)
        at org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir(AbstractConfigurableWebServerFactory.java:235)
        ... 18 common frames omitted
0:{"P":null,"b":"wfZ4FdS4ntgGvzjeKJhfw","p":"/e2-next","c":["","blog","spring-boot-dockerfile"],"i":false,"f":[[["",{"children":["blog",{"children":["(2024-03)",{"children":["spring-boot-dockerfile",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/e2-next/_next/static/css/d3df112486f97f47.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/e2-next/_next/static/css/c3624a693ae5a0c4.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","link",null,{"href":"https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap","rel":"stylesheet"}],["$","link",null,{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"}]]}],["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"gap":5,"children":[["$","$L3",null,{"gap":5,"className":"text-center","children":[["$","div",null,{"children":[["$","code",null,{"className":"SiteHeader_name__cwQmL","children":"Chung Cheuk Hang Michael"}],["$","code",null,{"className":"SiteHeader_title__CCfvI","children":"Java Web Developer"}]]}],["$","$L4",null,{}]]}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[],[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","hr",null,{}],["$","$L3",null,{"gap":3,"children":["$","$L7",null,{"className":"text-center","children":["$","$L8",null,{"xs":1,"sm":2,"md":3,"className":"justify-content-center g-3","children":[["$","$L9","0",{"children":["$","$La",null,{"as":"$b","href":"tel:+85263301333","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-phone","style":{"color":"#009688"}}]}],["$","$Le",null,{"className":"text-muted","children":["6330 1333"," "]}]]}]}]}],["$","$L9","1",{"children":["$","$La",null,{"as":"$b","href":"mailto:michaelboyboy@gmail.com","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-solid fa-envelope","style":{"color":"#f44336"}}]}],["$","$Le",null,{"className":"text-muted","children":["michaelboyboy@gmail.com"," "]}]]}]}]}],["$","$L9","2",{"children":["$","$La",null,{"as":"$b","href":"https://www.linkedin.com/in/mickchung","target":"_blank","rel":"external nofollow noopener noreferrer","className":"SiteFooter_contact-item__2JRRr","children":["$","$Lc",null,{"children":[["$","$Ld",null,{"children":["$","i",null,{"className":"fa-brands fa-linkedin","style":{"color":"#2196f3"}}]}],["$","$Le",null,{"className":"text-muted","children":["www.linkedin.com/in/mickchung"," "]}]]}]}]}]]}]}]}]]}]}]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["(2024-03)",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2024-03)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["spring-boot-dockerfile",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","(2024-03)","children","spring-boot-dockerfile","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":[[["$","h1",null,{"children":"1 Spring Boot 項目"}],"\n",["$","h2",null,{"children":"1.1 Maven dependencies"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-xml","children":"<parent>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t<version>3.2.4</version>\r\n</parent>\r\n\r\n<dependencies>\r\n\t<dependency>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t</dependency>\r\n\t<dependency>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-actuator</artifactId>\r\n\t</dependency>\r\n</dependencies>\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"1.2 Main class"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-java","children":"@SpringBootApplication\r\npublic class MainApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MainApplication.class, args);\r\n    }\r\n}\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"1.3 Application 配置"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"application.yml"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"management:\r\n    endpoints:\r\n        web:\r\n            exposure:\r\n                include: health,info,env,beans,loggers\r\n\r\n# 等目前既 HTTP requests 完成曬之後先會 shutdown，等候時間上限 60 秒\r\nserver:\r\n    shutdown: graceful\r\nspring:\r\n    lifecycle:\r\n        timeout-per-shutdown-phase: 60s\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"2 Dockerfile"}],"\n",["$","p",null,{"children":["關於 OpenJDK 用 ",["$","code",null,{"children":"jlink"}]," command 保留有需要既 modules，可以睇返呢篇：",["$","a",null,{"href":"/blog/custom-jre","children":"客製化 JRE"}],"。"]}],"\n",["$","h2",null,{"children":"2.1 只有 OpenJDK 既 Dockerfile"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$f"}]}],"\n",["$","h3",null,{"children":"2.1.1 Build script"}],"\n",["$","p",null,{"children":"我地可以配合以下既 build script："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"CALL mvn clean package\r\n\r\nPUSHD target\r\nREN *.jar app.jar\r\nPOPD\r\n\r\ndocker image build -t spring-boot-3-docker-test -f Dockerfile-openjdk.txt .\n"}]}],"\n",["$","p",null,{"children":["註：將 Dockerfile 保存做 ",["$","code",null,{"children":"Dockerfile-openjdk.txt"}],"。"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.2 行埋 Maven build 既 Dockerfile"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$10"}]}],"\n",["$","h3",null,{"children":"2.2.1 Build script"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"docker image build -t spring-boot-3-docker-test -f Dockerfile-maven-and-openjdk.txt .\n"}]}],"\n",["$","p",null,{"children":["註：將 Dockerfile 保存做 ",["$","code",null,{"children":"Dockerfile-maven-and-openjdk.txt"}],"。"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"2.3 詳細解釋"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["我地需要用到 Docker 既 multi-stage build 功能黎完成一啲事前準備功夫。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["包括：","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["用 ",["$","code",null,{"children":"jlink"}]," 客製化 OpenJDK，淨係保留對我地有用既 Java modules。"]}],"\n",["$","li",null,{"children":["用 ",["$","code",null,{"children":"mvn"}]," 打包個 Spring Boot 項目既 JAR 檔。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":"呢啲事前準備功夫可以用 intermediate stages 黎達成，而呢啲 stages 所產生出黎既 containers 同最後既 Docker image 冇關係。"}],"\n",["$","li",null,{"children":"我地可以將 intermediate stages 裡面既 output 檔案抄去最終既 Docker image 度。"}],"\n",["$","li",null,{"children":["真正既 base image 係 ",["$","code",null,{"children":"ubuntu"}],"。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"VOLUME"}]," instruction 係用黎定義我地個 Docker image 可能有啲需要保存既用戶數據。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Docker Desktop 既 behavior 係會自動建立 anonymous volume(s)，但如果我地用 ",["$","code",null,{"children":"docker container run"}]," 執行並且加左 ",["$","code",null,{"children":"--rm"}],"，咁個 container 結束既時候，Docker 就會自動刪除相關既 anonymous volume(s)。"]}],"\n",["$","li",null,{"children":["如果喺 cloud 既 Kubernetes 上面運行，而 ",["$","code",null,{"children":"readOnlyFilesystem"}]," 設置左係 ",["$","code",null,{"children":"true"}],"，而 containerd 又設置左 ",["$","code",null,{"children":"ignore_image_defined_volumes"}]," 係 ",["$","code",null,{"children":"true"}],"，咁呢個 ",["$","code",null,{"children":"VOLUME"}]," instruction 會被無視。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["喺個 Docker container 裡面執行 ",["$","code",null,{"children":"mount"}]," command 可以睇到 ",["$","code",null,{"children":"Dockerfile"}]," 既 ",["$","code",null,{"children":"VOLUME"}]," instructions 有冇令 volume mounts 生效到。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"EXPOSE"}]," instruction 係用黎定義我地個 app 會行喺咩 port 上面。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"RUN"}]," instruction 係用黎執行任意既 Linux commands。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["為左減少 layers 既數量，我地要盡量將啲 commands 放到一個 ",["$","code",null,{"children":"RUN"}]," instruction 裡面，用 ",["$","code",null,{"children":"&&"}]," 黎串連多個 commands，咁 Docker 就只會為呢一個 ",["$","code",null,{"children":"RUN"}]," instruction 增加一個 layer。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"mkdir -m <permission>"}]," 係用黎創建目錄，同時改變埋目錄既權限。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"WORKDIR"}]," instruction 會改變 container 既 working directory，影響後續 ",["$","code",null,{"children":"RUN"}],"、",["$","code",null,{"children":"CMD"}],"、",["$","code",null,{"children":"ENTRYPOINT"}],"、",["$","code",null,{"children":"COPY"}]," 以及 ",["$","code",null,{"children":"ADD"}]," instructions 既 working directory。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"docker container exec"}]," 或者 ",["$","code",null,{"children":"kubectl exec"}]," 入去個 container 之後最初既 working directory 會係 ",["$","code",null,{"children":"WORKDIR"}]," instruction 定義既 path。"]}],"\n",["$","li",null,{"children":["用 ",["$","code",null,{"children":"pwd"}]," command 可以顯示 working directory。"]}],"\n",["$","li",null,{"children":["正因為咁，所以最後一句 ",["$","code",null,{"children":"COPY"}]," instruction 會將 ",["$","code",null,{"children":"app.jar"}]," 抄到去個 ",["$","code",null,{"children":"ubuntu"}]," base image 既 ",["$","code",null,{"children":"/app"}],"（working directory）。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"addgroup"}],"、",["$","code",null,{"children":"adduser"}]," 係用黎新增 group、新增 user。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"加黎完全係為左安全需要。"}],"\n",["$","li",null,{"children":["因為 Docker 默認會用 ",["$","code",null,{"children":"root"}]," user 黎做曬所有野，我地唔希望個 Docker container 用一個有好大權限既 user。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"USER"}]," instruction 會切換 user，影響後續既 ",["$","code",null,{"children":"RUN"}]," instructions，亦會影響 runtime 既時候執行 ",["$","code",null,{"children":"CMD"}]," 或者 ",["$","code",null,{"children":"ENTRYPOINT"}]," 既 user。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["基於安全考慮，user 唔應該用默認既 ",["$","code",null,{"children":"root"}],"，否則就有好多權限。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"ENV"}]," instructions 係用黎設置 environment variable。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["我地要重新設置 ",["$","code",null,{"children":"PATH"}]," environment variable 係因為我地只係 base 左 ",["$","code",null,{"children":"ubuntu"}]," image，再將 OpenJDK 既 binaries 抄入去。如果唔設置 ",["$","code",null,{"children":"PATH"}]," 既話，",["$","code",null,{"children":"ubuntu"}]," 就唔知道可以喺 ",["$","code",null,{"children":"/app/jre/bin"}]," 度 lookup ",["$","code",null,{"children":"java"}]," 執行檔。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["修改 ",["$","code",null,{"children":"PATH"}]," 比較正路既做法係將要加入既 path 放喺左邊，然後用 ",["$","code",null,{"children":":"}]," 同現時既 paths 分隔。放喺左邊既原因係如果有兩個或以上既 paths 存在相同既執行檔，咁 Linux 會用最左邊果個，亦即係話擺喺左邊既呢個方法喺呢個情況下會比較有效。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"COPY"}]," instruction 可以幫我地抄檔案或者目錄。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"--from"}]," 會幫我地由之前既 stage 既 file system 抄 ",["$","code",null,{"children":"/javaruntime"}]," 裡面啲野去 ",["$","code",null,{"children":"ubuntu"}]," 既 ",["$","code",null,{"children":"/app/jre"}]," 裡面。"]}],"\n",["$","li",null,{"children":["如果冇 ",["$","code",null,{"children":"--from"}],"，就會由本地既 working directory 抄入去。"]}],"\n",["$","li",null,{"children":["可以用 ",["$","code",null,{"children":"--chown"}]," 順便做埋 ",["$","code",null,{"children":"chown"}],"，將 owner、group 改做 ",["$","code",null,{"children":"<user>:<group>"}],"。"]}],"\n",["$","li",null,{"children":["可以用 ",["$","code",null,{"children":"--chmod"}]," 順便做埋 ",["$","code",null,{"children":"chmod"}],"，修改權限。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["例如將權限改做 ",["$","code",null,{"children":"445"}],"，咁 owner、group 只可以 read，而 public（其他 users 或者 groups）只可以 read、execute。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"#"}]," 係用黎寫 comment，咁果句就唔會生效。"]}],"\n",["$","li",null,{"children":["我地可以用 ",["$","code",null,{"children":"CMD"}]," 或者 ",["$","code",null,{"children":"ENTRYPOINT"}]," instruction 黎話畀 Docker 知 Docker container 執行既時候應該行咩 commands。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"CMD"}]," 可以被覆蓋。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"ENTRYPOINT"}]," 唔可以被覆蓋，一定會執行。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["關於權限，我地既 OpenJDK、",["$","code",null,{"children":"app.jar"}]," 既 owner、group 都係 ",["$","code",null,{"children":"root"}],"，但因為我地用左 ",["$","code",null,{"children":"USER"}]," instruction 切換左做 ",["$","code",null,{"children":"myuser"}],"，而呢個 user 屬於另一個叫 ",["$","code",null,{"children":"mygroup"}]," 既 group，所以佢地需要開放權限畀 public，咁 ",["$","code",null,{"children":"myuser"}]," 先可以用到佢地。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"myuser"}]," 需要 OpenJDK 既 read、execute 權限。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"myuser"}]," 需要 ",["$","code",null,{"children":"app.jar"}]," 既 read 權限，唔需要 execute 權限係因為佢唔係直接執行 ",["$","code",null,{"children":"app.jar"}],"，而係透過 OpenJDK 裡面既 ",["$","code",null,{"children":"java"}],"。"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"3 執行"}],"\n",["$","h2",null,{"children":"3.1 Docker Desktop"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"docker container run --rm -p 8080:8080 spring-boot-3-docker-test\n"}]}],"\n",["$","p",null,{"children":"Read-only file system 模式："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"docker container run --rm -p 8080:8080 --read-only spring-boot-3-docker-test\n"}]}],"\n",["$","p",null,{"children":"註："}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["用左 ",["$","code",null,{"children":"--read-only"}]," 既話，一定要令到 ",["$","code",null,{"children":"/tmp"}]," 有 volume mount，從而令 ",["$","code",null,{"children":"/tmp"}]," 可以寫入。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"否則，如果 Spring Boot 既 embedded Tomcat 喺 runtime 既時候創建唔到目錄或者寫入唔到落 temp folder 既話，就會令成個 Spring Boot microservice 啟動失敗。"}],"\n",["$","li",null,{"children":["用 Docker Desktop 既話可以利用 Dockerfile 既 ",["$","code",null,{"children":"VOLUME /tmp"}]," instruction。"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.2 Kubernetes"}],"\n",["$","p",null,{"children":"我地可以開啟 Docker Desktop 內置既 Kubernetes 功能，或者用某個 cloud provider 既 Kubernetes 服務。"}],"\n",["$","p",null,{"children":["關於 ",["$","code",null,{"children":"kubectl"}]," CLI 既 commands 可以睇返呢篇：",["$","a",null,{"href":"/blog/kubectl-basics","children":"kubectl 基本操作"}],"。"]}],"\n",["$","h3",null,{"children":["3.2.1 單獨 ",["$","code",null,{"children":"Pod"}]]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"k8s-pod.yml"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"$11"}]}],"\n",["$","p",null,{"children":"保存左個檔案之後執行："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"kubectl apply -f k8s-pod.yml\n"}]}],"\n",["$","p",null,{"children":["之後 port-forward 個 K8s ",["$","code",null,{"children":"Pod"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"kubectl port-forward spring-boot-3-docker-test 8080\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h3",null,{"children":["3.2.2 ",["$","code",null,{"children":"Deployment"}]]}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"k8s-deployment.yml"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-yaml","children":"$12"}]}],"\n",["$","p",null,{"children":"保存左個檔案之後執行："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"kubectl apply -f k8s-deployment.yml\n"}]}],"\n",["$","p",null,{"children":["之後 port-forward 個 K8s ",["$","code",null,{"children":"Deployment"}],"："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"kubectl port-forward deployment/spring-boot-3-docker-test-deployment 8080\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.3 測試"}],"\n",["$","p",null,{"children":"可以檢查下 Spring Boot Actuator 既 HTTP REST endpoints："}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-bash","children":"curl http://localhost:8080/actuator/health\r\ncurl http://localhost:8080/actuator/health/liveness\r\ncurl http://localhost:8080/actuator/health/readiness\r\ncurl http://localhost:8080/actuator/info\r\ncurl http://localhost:8080/actuator/env\r\ncurl http://localhost:8080/actuator/beans\r\ncurl http://localhost:8080/actuator/loggers\n"}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.4 詳細解釋"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Spring Boot 本身具備 cloud awareness。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"喺呢個測試項目裡面，我地用左 Spring Boot Actuator，而個 Spring Boot microservice 又喺 Kubernetes 上面運行。"}],"\n",["$","li",null,{"children":["Spring Boot 會 check 到有 ",["$","code",null,{"children":"KUBERNETES_SERVICE_HOST"}],"、",["$","code",null,{"children":"KUBERNETES_SERVICE_PORT"}]," 呢兩個 environment variables。"]}],"\n",["$","li",null,{"children":["所以 Spring Boot 就知道佢而家喺 Kubernetes 上面行緊，就會自動 expose ",["$","code",null,{"children":"/actuator/health/liveness"}],"、",["$","code",null,{"children":"/actuator/health/readiness"}]," 呢兩個 HTTP REST endpoints。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["我地配置 Kubernetes 既 ",["$","code",null,{"children":"terminationGracePeriodSeconds"}]," 秒數唔應該少過我地配置既 Spring Boot graceful shutdown 既 ",["$","code",null,{"children":"spring.lifecycle.timeout-per-shutdown-phase"}]," 配置時限。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Spring Boot 默認係會即時 shutdown，無視未完成既 HTTP requests。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["我地當然唔想有 HTTP requests 突然被中斷，所以我地要指示 Spring Boot 用 graceful shutdown 方式，並且將 shutdown timeout 設置到一個合理既數值。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["將 ",["$","code",null,{"children":"server.shutdown"}]," 設置做 ",["$","code",null,{"children":"graceful"}],"。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"spring.lifecycle.timeout-per-shutdown-phase"}]," 既默認值係 ",["$","code",null,{"children":"30"}]," 秒。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":"設置好之後，Spring Boot 會等到當時未完成既 HTTP requests 都完成曬或者到左 shutdown timeout 既時限先至 shutdown。"}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Kubernetes 都有默認 ",["$","code",null,{"children":"30"}]," 秒既 ",["$","code",null,{"children":"terminationGracePeriodSeconds"}]," 配置。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["如果我地有配置到比 ",["$","code",null,{"children":"30"}]," 秒長既 Spring Boot shutdown timeout，咁我地都要配置埋 Kubernetes 果個。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["例子／測試方法","\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["我地既 Spring Boot microservice 可以 expose 一個會 ",["$","code",null,{"children":"Thread.sleep(100_000)"}],"（暫停 ",["$","code",null,{"children":"100"}]," 秒）既 HTTP REST endpoint。"]}],"\n",["$","li",null,{"children":["然後設置 Spring Boot graceful shutdown、shutdown timeout 做 ",["$","code",null,{"children":"120"}]," 秒。"]}],"\n",["$","li",null,{"children":"重新 build 個 Spring Boot Docker image。"}],"\n",["$","li",null,{"children":["然後喺部署 Kubernetes 既 YAML 配置檔度設置 termination grace period 做 ",["$","code",null,{"children":"120"}]," 秒。"]}],"\n",["$","li",null,{"children":["用 ",["$","code",null,{"children":"kubectl apply"}]," 部署個 Spring Boot microservice 既 K8s ",["$","code",null,{"children":"Deployment"}],"。"]}],"\n",["$","li",null,{"children":["我地 port-forward 其中一個 ",["$","code",null,{"children":"Pod"}],"，然後用 Postman 或者 Bruno 去 call 個新 endpoint。"]}],"\n",["$","li",null,{"children":["我地即刻執行 ",["$","code",null,{"children":"kubectl rollout restart deployment spring-boot-3-docker-test-deployment"}],"。"]}],"\n",["$","li",null,{"children":["我地會見到 Postman 或者 Bruno 可以執行個 HTTP request 長達 ",["$","code",null,{"children":"120"}]," 秒，到成功返回 HTTP response 之後 Kubernetes 先會結束個 ",["$","code",null,{"children":"Pod"}],"，然後用新既去取代佢。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Kubernetes 提供左唔同既 probes 配置去驗證個 ",["$","code",null,{"children":"Pod"}]," 到底正唔正常。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["佢可以持續咁自動 call 個 ",["$","code",null,{"children":"Pod"}]," 既一啲 HTTP endpoints。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["成功既定義係 HTTP response status code 要係 ",["$","code",null,{"children":"200"}]," 至 ",["$","code",null,{"children":"399"}],"。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Probes","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["如果 startup probe 既 HTTP endpoint fail 左，Kubernetes 就會回收個 ",["$","code",null,{"children":"Pod"}],"。"]}],"\n",["$","li",null,{"children":["如果 liveness probe 既 HTTP endpoint fail 左，Kubernetes 就會回收個 ",["$","code",null,{"children":"Pod"}],"。"]}],"\n",["$","li",null,{"children":["如果 readiness probe 既 HTTP endpoint fail 左，Kubernetes 就會唔畀 traffic 去呢個 ",["$","code",null,{"children":"Pod"}]," 度。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"initialDelaySeconds"}]," 係初始化既時候，Kubernetes 應該等幾耐先開始驗證。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"periodSeconds"}]," 係初始化完成之後，Kubernetes 每隔幾耐需要驗證。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"failureThreshold"}]," 可以允許幾次失敗。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Spring Boot Actuator 提供左對應 Kubernetes liveness、readiness probes 既 HTTP REST endpoints。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","code",null,{"children":"/actuator/health/liveness"}]," 可以用落 Kubernetes 既 liveness probe。"]}],"\n",["$","li",null,{"children":[["$","code",null,{"children":"/actuator/health/readiness"}]," 可以用落 Kubernetes 既 readiness probe。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["呢個 endpoint 返回 HTTP response status code ",["$","code",null,{"children":"200"}]," 既話，即係表示個 HTTP server 已經準備好接受 HTTP requests。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":"Liveness endpoint 返回正面既結果，唔代表 readiness endpoint 會返回正面既結果，因為個 HTTP server 未必準備好接受 HTTP requests。"}],"\n",["$","li",null,{"children":"如果 readiness endpoint 返回正面既結果，咁 liveness endpoint 都應該返回正面既結果。"}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Spring Boot Actuator 冇提供對應 Kubernetes startup probe 既 startup endpoint。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["有兩個解決方法：","\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["我地可以用返 Spring Boot Actuator 既 liveness endpoint 作為 Kubernetes startup probe，然後配置一個好大既 ",["$","code",null,{"children":"failureThreshold"}],"，例如 ",["$","code",null,{"children":"30"}]," 次，配合短既 ",["$","code",null,{"children":"periodSeconds"}],"，例如 ",["$","code",null,{"children":"5"}]," 秒（即係最長 ",["$","code",null,{"children":"2.5"}]," 分鐘）。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"呢個做法等於延續 Kubernetes liveness probe 既驗證時間。"}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["我地可以為 Kubernetes liveness、readiness probes 配置一個好大既 ",["$","code",null,{"children":"initialDelaySeconds"}],"，例如 ",["$","code",null,{"children":"180"}]," 秒，但呢個時間係固定既，時間越長就越會增加 scaling 既成本。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["我地可以用 K8s ",["$","code",null,{"children":"Deployment"}]," 既 ",["$","code",null,{"children":"replicas"}]," 配置黎定義需要既 ",["$","code",null,{"children":"Pod"}]," 數量。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["用呢個方法得到既 ",["$","code",null,{"children":"Pod"}]," 數量係固定既，唔會因應 ",["$","code",null,{"children":"Pod"}]," container 既 CPU、memory 情況而自動增加減少。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["比較好既做法係用 K8s ",["$","code",null,{"children":"HorizontalPodAutoscaler"}],"。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Kubernetes 會幫我地管理 ",["$","code",null,{"children":"Pod"}],"，盡可能保持我地要求既 ",["$","code",null,{"children":"Pod"}]," 數量。"]}],"\n",["$","li",null,{"children":["Kubernetes 會幫我地自動創建一個 K8s ",["$","code",null,{"children":"ReplicaSet"}],"。"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"3.5 注意事項"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["設置左 ",["$","code",null,{"children":"readOnlyRootFilesystem"}]," 做 ",["$","code",null,{"children":"true"}]," 既話，一定要令到 ",["$","code",null,{"children":"/tmp"}]," 有 volume mount，從而令 ",["$","code",null,{"children":"/tmp"}]," 可以寫入。","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"否則，如果 Spring Boot 既 embedded Tomcat 喺 runtime 既時候創建唔到目錄或者寫入唔到落 temp folder 既話，就會令成個 Spring Boot microservice 啟動失敗。"}],"\n",["$","li",null,{"children":["用 Docker Desktop 既 Kubernetes 既話，有兩個方法：","\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["用 Kubernetes 正路既 ",["$","code",null,{"children":"emptyDir"}]," 方法。"]}],"\n",["$","li",null,{"children":["Dockerfile 用 ",["$","code",null,{"children":"VOLUME /tmp"}]," instruction。"]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["用 cloud 既 Kubernetes 既話，有兩個方法：","\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["用 Kubernetes 正路既 ",["$","code",null,{"children":"emptyDir"}]," 方法。"]}],"\n",["$","li",null,{"children":["Dockerfile 用 ",["$","code",null,{"children":"VOLUME /tmp"}]," instruction，但 containerd 既 ",["$","code",null,{"children":"ignore_image_defined_volumes"}]," 一定要配合佢而設置做 ",["$","code",null,{"children":"false"}],"。"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"4 附錄"}],"\n",["$","h2",null,{"children":"4.1 Snyk Java Dockerfile best practices"}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/blog/2024-03/spring-boot-dockerfile/snyk-best-practices.png","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":"4.2 Kubernetes pod lifecycle"}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/blog/2024-03/spring-boot-dockerfile/k8s-probes.jpg","alt":""}]}],"\n",["$","hr",null,{}],"\n",["$","h2",null,{"children":["4.3 Read-only file system ",["$","code",null,{"children":"/tmp"}]," 寫入問題"]}],"\n",["$","p",null,{"children":["以下係如果我地冇整好 volume mount 落 ",["$","code",null,{"children":"/tmp"}]," 會造成既 startup error："]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-plaintext","children":"$13"}]}],"\n",["$","hr",null,{}],"\n",["$","h1",null,{"children":"5 參考資料"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://docs.docker.com/reference/dockerfile/","children":"Docker 官網 - Dockerfile reference"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://docs.docker.com/build/building/multi-stage/","children":"Docker 官網 - Multi-stage builds"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://snyk.io/blog/best-practices-to-build-java-containers-with-docker/","children":"Snyk - 10 best practices to build a Java container with Docker"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://learn.microsoft.com/en-us/java/openjdk/containers#create-a-custom-java-runtime","children":"Microsoft 官方文檔 - Container images for the Microsoft Build of OpenJDK - Create a custom Java runtime"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.kubernetes-probes.lifecycle","children":"Spring Boot 官方文檔 - Production-ready Features - 2.10.2. Application Lifecycle and Probe States"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://andrewlock.net/deploying-asp-net-core-applications-to-kubernetes-part-6-adding-health-checks-with-liveness-readiness-and-startup-probes/","children":"Adding health checks with Liveness, Readiness, and Startup probes"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/","children":"Kubernetes 官方文檔 - Configure Liveness, Readiness and Startup Probes"}]}],"\n",["$","li",null,{"children":["$","a",null,{"href":"https://kubernetes.io/docs/concepts/storage/volumes/#emptydir","children":"Kubernetes 官方文檔 - Volumes - emptyDir"}]}],"\n"]}]],null,["$","$L14",null,{"children":"$L15"}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","VS_L_4h4pnYjZgvozTU_8",{"children":[["$","$L16",null,{"children":"$L17"}],["$","$L18",null,{"children":"$L19"}],null]}]]}],false]],"m":"$undefined","G":["$1a","$undefined"],"s":false,"S":true}
19:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
17:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Michael Chung's e-Portfolio"}],["$","meta","2",{"name":"description","content":"Powered by Next.js and React"}]]
15:null
